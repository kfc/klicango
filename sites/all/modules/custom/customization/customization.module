<?php

function customization_menu(){
  $items = array();
  
  $items['mark_ads/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'customization_mark_ads',
    'page arguments' =>array(1),
    'access callback' => 'user_is_logged_in'
  );
  
  $items['messages'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'customization_fake',
    'access callback' => 'user_is_logged_in'
  );
  
  $items['main'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'customization_front',
    'access callback' => true,
  );
  
  $items['facebook/friends'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'customization_facebook_friends',
    'access callback' => true,
  );
  
  $items['admin/settings/carousel'] = array(
    'title' => 'Carousel settings',
    'description' => 'Settings of main carousel (homepage) and professional carousel.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('customization_carousel_settings'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'customization.admin.inc',
  );
  
  $items['admin/settings/collect_money'] = array(
    'title' => 'Collect money settings',
    'description' => 'Settings collect money functionality.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('customization_collect_money_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'customization.admin.inc',
  );  
  
 $items['comment_delete/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'customization_comment_delete',
    'page arguments' => array(1),
    'access callback' => 'check_comment_delete',
    'access arguments' => array(1),
  );
  
  $items['klicango_search'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'customization_klicango_search',
    'access callback' => true,
  );
   
  return $items;
  
  
}
function customization_front() {
    return '';
}

function check_comment_delete($nid, $node = null){
  global $user;
  if(!empty($nid)){  
    if(empty($node)){
      $node = node_load($nid, null, true);
    }
    if(!isset($node->comment_target_node))
      $node->comment_target_node = node_load($node->comment_target_nid);
   
    return ($node->type == 'comment' && (($user->uid == $node->uid) || $node->comment_target_node->uid == $user->uid));
  }
  else return false;
}

function customization_comment_delete($nid){
  global $user;
  if(!empty($nid)){
    node_delete($nid);
  } 
  drupal_goto(); 
}


function customization_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    if ($form_id == 'user_profile_form') {
        $form['#submit'][] = 'customization_set_user_role';
    }
    if ($form_id == 'user_register') {
        $form['#submit'][] = 'customization_set_user_role';
    }
    
    if($form_id == 'photos_editlist'){
      if(in_array('professional',$user->roles)){ 
        $ads = customization_get_adv_images(arg(1));
        foreach($form['photos'] as $fid => &$item){
          if(is_array($item)){
            $item['adv'] = array(
              '#type' => 'checkbox',
              '#title' => t('Advertise'),
              '#default_value' => in_array($fid, $ads),
            );  
          }
        }
        $form['submit']['#submit'][] = 'customization_save_advertise_images'; 
      }
      $form['submit']['#submit'][] = 'customization_save_featured_ads';
      
    }
    return $form;
}


function customization_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'delete':
      if($node->type == 'photos'){
        profile_load_profile($user);
        if($node->nid == $user->profile_featured_ads_album){
          $user->profile_featured_ads_album = 0;  
          $res = db_query("SELECT fid FROM {profile_fields} WHERE name = 'profile_featured_ads_album'");
          $fid = db_fetch_array($res);
          $fid = $fid['fid'];
          db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $fid, $user->uid);
          db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')",$fid,  $user->uid, 0);
        }
        
      }
      $node->content['my_additional_field'] = array(
        '#value' => theme('mymodule_my_additional_field', $additional_field),
        '#weight' => 10,
      );
      break;
  }
  
}

function customization_fake(){
  return '';
}

function customization_save_advertise_images(&$form, &$form_state){
  foreach($form_state['values']['photos'] as $fid => $key) {
      db_query("UPDATE {x_image} SET is_adv = %d WHERE fid = %d", $key['adv'], $fid);    
  }
}

function customization_save_featured_ads(&$form, &$form_state){
  global $user;
  profile_load_profile($user);
  foreach($form_state['values']['photos'] as $fid => $key) {
    if (!empty($key['del'])) {
      customization_remove_user_featured_ads($user, $fid);    
        
    }    
  }
}


function customization_set_user_role($form, &$form_state) {
    global $user;
    $roles = $user->roles;
    $arkeys = array_keys($roles);
    if (!empty($form_state['values']['profile_professional_page']) && !in_array(7, $arkeys, true)) {
        $roles[7] = 'professional';
        if(($key = array_key_exists(6, $roles)) !== false) {
            unset($roles[6]);
        }
    }

    if (empty($form_state['values']['profile_professional_page'])) {
        if(($key = array_key_exists(7, $roles)) !== false) {
            unset($roles[7]);
        }
        $roles[6] = 'individual';
    }
    module_invoke('user', 'save', $user, array('roles' => $roles)); 
} 

function customization_block($op = 'list', $delta = 0, $edit = array()) {
    if ($op == 'list') {
        $blocks[0] = array(
            'title' => t('Activity stream'),
            'info' => t('Activity stream feed'),
            'weight' => 0,
        );
        
        $blocks[1] = array(
            'title' => t('Image ADs'),
            'info' => t('Image ADs'),
            'weight' => 0,
        );
        $blocks[2] = array(
            'info' => t('Homepage carousel'),
        );
        $blocks[3] = array(
          'info' => t('User Account Info')
        );
        
        
        return $blocks;
    } else if ($op == 'view') {
        switch ($delta) {
          case 0:
            // Your module will need to define this function to render the block.
            $block = array(
              'subject' => t('Activity stream'),
              'content' => customization_get_activity_stream(),
            );
            break;
          
          case 1:
            // Your module will need to define this function to render the block.
            $block = array(
              'subject' => '<none>',
              'content' => customization_get_image_ads(),
            );
            break;  
          case 2:
            $block = array(
              'subject' => '<none>',
              'content' => customization_carousel_contents(),
            );
            break;
          
          case 3:
            $block = array(
              'subject' => '<none>',
              'content' => 'content'
            );
          
            break;  
            
        }
        return $block;
    }
}

function customization_init() {
    if ($_GET['q'] == 'user/register') {
      drupal_goto('<front>');
    }
    if (!user_is_logged_in() && ($_GET['q'] != 'user/login' && $_GET['q'] != 'user/register') && ($_GET['q'] != 'fboauth/connect')) {
        //drupal_goto('main');
    }
}

function customization_get_activity_stream() {
    if (user_is_anonymous()) {
        $prompt = array();
        $prompt[] = t('Share your own status updates, and follow the updates & activities of others by !register.', array('!register' => l(t('creating your own account'), 'user/register')));
        $prompt[] = t('Or, remember to !login If you already have an account.', array('!login' => l(t('log in'), 'user/login')));
        return implode('<br/><br/>', $prompt);
    }
        // Check access to view/use activity messages
        else if (user_access('view all activity messages')) {
        return theme('facebook_status_form_display', NULL, NULL, 'activity_log_stream');
    }
    // Logged in, but without access
    else {
        return '';
    }
}

function customization_views_query_alter(&$view, &$query) {
  global $user;
  if($view->name == 'content_event_calendar' && ($view->current_display == 'calendar_1' || $view->current_display == 'calendar_period_2' || $view->current_display == 'calendar_period_3') ){
    
    $_user_id = 0;
    if(arg(0) == 'user')
      $_user_id = arg(1);
    elseif(arg(0) == 'user_calendar' && arg(2) != ''){
      $_user_id = arg(2);
    }  
      
    if($_user_id > 0)  {
      if($user->uid != $_user_id)
        $_user = user_load($_user_id);
      else 
        $_user = $user;
      
       
       array_pop($query->where[0]['clauses']);   
        array_pop($query->where[0]['args']);
        $query->where[0]['clauses'][] = $query->where['date']['clauses'][0];
        //$query->where[0]['args'][] = $query->where['date']['args'][0];
        unset($query->where['date']);     
        
       // If user views individual's calendar then show public events and events you are participating or invited to        
      if(($_user->uid != $user->uid) && in_array('individual',$_user->roles)){    
        $available_events = get_private_calendar_events_viewed_by_user($_user->uid, $user->uid, EVENT_STATUS_ACCEPTED);  
        if(!empty($available_events)){          
            $query->where[0]['clauses'][] = 'node.nid IN (%s)';
            $query->where[0]['args'][] = implode(',',$available_events);
          }
          else{
            $query->where[0]['clauses'][] = 'FALSE';  
          }
          $query->group_operator = 'OR';  
      }
      else{ 
        $query->where[0]['clauses'][] = 'node.uid = %d';
        $query->where[0]['args'][] = $_user->uid;  
        //$query->where 
        if(in_array('individual',$_user->roles)){
          $user_accepted_events = events_get_user_events_with_status($_user->uid, EVENT_STATUS_ACCEPTED); // GET ACCEPTED EVENTS
          if(!empty($user_accepted_events)){          
            $query->where[] = array(
              'clauses'=>array('node.nid IN ( '.implode(',',$user_accepted_events).' )'),
              'args'=>array($view->args[2]),
              'type' =>'AND'
            ); 
          }
          $query->group_operator = 'OR';  
      }
    }
    
    
    }
    //dpm($query);
  }
   
}

function customization_get_adv_images($album_id = null){
  $images = array();
  if(!empty($album_id))
    $images_res = db_query('SELECT fid from {x_image}  WHERE is_adv = 1 AND pid=%d', $album_id);
  else
    $images_res = db_query('SELECT fid from {x_image} WHERE is_adv = 1');   
  
  while( $img = db_fetch_array($images_res)){
    $images[] = $img['fid']; 
  }
  return $images;
}

function customization_get_image_ads(){
   global $user;
   $output = '';
  /* if(arg(0) == 'user'){
    $uid = arg(1);
    if(!empty($uid))
      $_user = user_load($uid);  
     
   }
   else{*/
    $_user = user_load($user->uid);
    $uid = $user->uid;
   //}
   
   $images = customization_get_image_ads_for_user($_user);
   
   profile_load_profile($user);
   $featured_ads = customization_get_user_featured_ads($user);
   
   $output = '<div class="ads-wrapper">';
   foreach($images as $image){
    $output .= '<div class="ads-item">'.theme('image',$image['thumb']['192x288']).'<span>'.(!empty($image['des']) ? $image['des'] : '&nbsp;').'</span>';
    if(in_array('individual',$user->roles) && !in_array($image['fid'],array_keys($featured_ads)))
      $output .= l('<span class="like-icon">'.theme('image',drupal_get_path('theme','commons_origins').'/images/like.jpg').'</span>', 'mark_ads/'.$image['fid'], array('html'=>TRUE,'query'=>drupal_get_destination()));
    $output .= '</div>';
   }
   $output .= '</div>';
   return $output;
}

function customization_get_image_ads_for_user($user){
  $photos = array();
  if(in_array('individual', $user->roles)){
    if(!empty($user->user_terms)){ 
      $user_interests = array_keys($user->user_terms);
    }  
    //taxonomy_te
    if(!empty($user_interests)){
      $result = taxonomy_select_nodes($user_interests);
      $albums = array(); 
      while ($row = db_fetch_object($result)) {
        $albums[] = $row->nid;
      }
    }
    $photos = customization_get_photos_for_albums($albums, true);
  }
  elseif(in_array('professional', $user->roles)){
    $result = db_query('SELECT nid FROM {node} WHERE type=\'photos\' AND uid = '.$user->uid);
     while ($row = db_fetch_object($result)) {
        $albums[] = $row->nid;
     }
     $photos = customization_get_photos_for_albums($albums, true);
     //dpm($albums);  
  }
  else return array();
  if(empty($photos))
    $photos = array();
  return $photos;
}

function customization_get_photos_for_albums($albums = array(), $is_adv = false){
  if(empty($albums))
    return array();
  if(!is_array($albums))
    $albums = array($albums);
  $result = db_query('
    SELECT f.filepath, f.filemime, f.timestamp, f.filename, f.filesize, u.uid, u.name, p.* 
    FROM {files} f 
    INNER JOIN {x_image} p ON f.fid = p.fid 
    INNER JOIN {users} u ON f.uid = u.uid 
    WHERE p.pid IN (%s)
    '.(($is_adv == true) ? ' AND is_adv = 1' : '').'
    ', implode(',',$albums));
    
  while($data = db_fetch_array($result)){
    $images[] = photos_get_info(0, $data);
  }  
    
  return $images;
  
}

function customization_mark_ads($fid){
  global $user;
  profile_load_profile($user); 
  
  if(!isset($user->profile_featured_ads_album) || empty($user->profile_featured_ads_album) ) {
    //die($user->profile_featured_ads_album);
    $node = new StdClass();
    $node->type = 'photos';
    $node->status = 1;
    $node->uid = $user->uid;
    $node->title = "My Featured Ads";
    node_save($node);
    
    db_query("UPDATE {x_album} SET data = '%s' WHERE pid=%d",'a:15:{s:9:"viewpager";s:2:"10";s:10:"imageorder";s:14:"timestamp|desc";s:14:"list_imagesize";s:7:"240x180";s:14:"view_imagesize";s:7:"640x480";s:5:"slide";s:7:"640x480";s:11:"slide_music";s:0:"";s:12:"page_display";s:1:"1";s:12:"page_viewnum";s:2:"10";s:14:"page_imagesize";s:5:"thumb";s:10:"page_slide";s:7:"640x480";s:3:"pid";s:2:"12";s:14:"teaser_display";s:1:"2";s:14:"teaser_viewnum";s:1:"4";s:16:"teaser_imagesize";s:5:"thumb";s:12:"teaser_slide";s:7:"640x480";}',$node->nid);
    
    $user->profile_featured_ads_album = $node->nid;
    $res = db_query("SELECT fid FROM {profile_fields} WHERE name = 'profile_featured_ads_album'");
    $_fid = db_fetch_array($res);
    $_fid = $_fid['fid'];
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $_fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')",$_fid,  $user->uid, $node->nid);
  }
  
  $featured_ads = customization_get_user_featured_ads($user);
  
  if(!empty($user->profile_featured_ads_album) && !in_array($fid,array_keys($featured_ads))){
    
    // copy file record
    $file = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = %d", $fid));
    
    $filename = $file->filename;
   
    $file->filename = basename($file->filepath);
    $new_filename = str_replace('.','_copy.',$file->filepath);
    
    if(!file_exists('/'.$new_filename))
      file_copy($file->filepath, $new_filename);
   
    db_query('INSERT INTO files(uid, filename, filepath, filemime, filesize, status, timestamp) (SELECT '.$user->uid.',\'%s\', \'%s\', filemime, filesize, status, '.time().' from files WHERE fid=%d)',$filename,$new_filename, $fid);
    $new_fid = db_last_insert_id('files','fid');
    $file = db_fetch_object(db_query('
      SELECT f.filepath, f.filemime, f.timestamp, f.filename, f.filesize,u.uid, u.name, p.* 
      FROM {files} f 
      INNER JOIN {x_image} p ON f.fid = p.fid 
      INNER JOIN {node} n ON p.pid = n.nid 
      INNER JOIN {users} u ON f.uid = u.uid 
      WHERE f.fid = %d'. $fid));
    
    $file->fid = $new_fid;
    $file->pid = $user->profile_featured_ads_album;
    $file->title = $filename;
    photos_image_date($file, 1);
    customization_add_user_featured_ads($user, $fid,$new_fid);
       
  }
  drupal_goto();
  return  '';
}

function customization_get_user_featured_ads($user){
  if(isset($user->profile_featured_ads) && !empty($user->profile_featured_ads)){
    $featured_ads = unserialize($user->profile_featured_ads);
    return $featured_ads;
  }
  else return array();
}

function customization_add_user_featured_ads(&$user, $fid,$new_fid){
    $featured_ads = unserialize($user->profile_featured_ads);
    if(empty($featured_ads))
      $featured_ads = array();
    if(!in_array($fid, $featured_ads))
      $featured_ads[$fid] = $new_fid;
    
    $res = db_query("SELECT fid FROM {profile_fields} WHERE name = 'profile_featured_ads'");
    $_fid = db_fetch_array($res);
    $_fid = $_fid['fid'];
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $_fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')",$_fid,  $user->uid, serialize($featured_ads));
    $user->profile_featured_ads = serialize($featured_ads);
    return true;
}


function customization_remove_user_featured_ads(&$user, $fid){ 
  if(isset($user->profile_featured_ads) && !empty($user->profile_featured_ads)){  
    $featured_ads = unserialize($user->profile_featured_ads);
    $key = array_search($fid,$featured_ads);
    unset($featured_ads[$key]);
    
    $res = db_query("SELECT fid FROM {profile_fields} WHERE name = 'profile_featured_ads'");
    $_fid = db_fetch_array($res);
    $_fid = $_fid['fid'];
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $_fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')",$_fid,  $user->uid, serialize($featured_ads));
    
    return true;
  }
  else return false;
}

function customization_fboauth_user_save($account, $fbuser) {
	$roles = $account->roles;
	$roles[6] = 'individual';
	module_invoke('user', 'save', $account, array('roles' => $roles));
}

function customization_carousel_contents() {
    $result = db_query('SELECT DISTINCT (p.user_id), photo FROM advanced_profile p GROUP BY p.user_id ORDER BY RAND( )  LIMIT 0 , 5');
    $slides = array();
    while ($place = db_fetch_array($result)) {
        $udata = user_load($place['user_id']);
        $slides[] = array(
                        'uid' => $place['user_id'],
                        'photo' => $place['photo'],
                        'profile_picture' => $udata->picture,
                        'name' => $udata->first_name,
                        'address' => $udata->address,
                        'city' => $udata->city,
                        'zip' => $udata->zip,
                    );
    }
    
    return theme('homepage_carousel', $slides);
}

function customization_theme(){
    return array(
        'homepage_carousel' => array(
            'template' => 'theme/homepage_carousel',
            'arguments' => array(
                'slides' => null, 
            ),

        ),
        'search_results' => array(
            'template' => 'search-results',
            'path' => drupal_get_path('theme',variable_get('theme_default','')),
            'arguments' => array('search_results' => NULL),
        ),
    );
}

function customization_fboauth_user_presave(&$edit, $fbuser) {
    
    if (!empty($edit['city'])) {
        $location = explode(', ', $edit['city']);
        $edit['country'] = $location[1];
        $edit['city'] = $location[0];
    }
    $edit['name'] = $edit['mail'];

    $edit['roles'] = array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        6 => 'individual',
      );

}

function customization_facebook_friends() {
    if (!empty($_SESSION['access_token'])) {
        
    /*$parameters = array(
        'app_id' => variable_get('fboauth_id', ''),
        'to' => '14603461,697357230',
        'link' => 'http://klic.zenko.by/',
        'message' => 'Hello, world!',
        'redirect_uri' => 'http://klicango.loc/'
     );
     $url = 'http://www.facebook.com/dialog/apprequests?'.http_build_query($parameters);

     echo '<script type="text/javascript">window.open('.json_encode(str_replace('&amp;', '&',$url)).');</script>';*/
        exit;
        $access_token = $_SESSION['access_token'];
        $result = customization_graph_query('/me/friends?limit=10', $access_token);
        echo '<ul>';
        foreach ($result->data as $value) {
            echo '<li>';
            echo '<div class="pic">';
            echo '<img src="https://graph.facebook.com/' . $value->id . '/picture"/>';
            echo '</div>';
            echo '<div class="picName">'.$value->name.'</div>'; 
            echo '</li>';
        }
        echo '</ul>';
    }
}

function customization_facebook_token() {
    $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');
    $app_secret = isset($app_secret) ? $app_secret : variable_get('fboauth_secret', '');
    
    // Note that the "code" provided by Facebook is a hash based on the client_id,
    // client_secret, and redirect_url. All of these things must be IDENTICAL to
    // the same values that were passed to Facebook in the approval request. See
    // the fboauth_link_properties function.
    $query = array(
        'client_id' => $app_id,
        'client_secret' => $app_secret,
        'grant_type' => 'client_credentials',
    );
    $token_url = url('https://graph.facebook.com/oauth/access_token', array('absolute' => TRUE, 'query' => $query));
    $authentication_result = drupal_http_request($token_url);
    
    if ($authentication_result->code != 200) {
        $error = !empty($authentication_result->error) ? $authentication_result->error : t('(no error returned)');
        $data = !empty($authentication_result->data) ? print_r($authentication_result->data, TRUE) : t('(no data returned)');
        watchdog('fboauth', 'Facebook OAuth could not acquire an access token from Facebook. We queried the following URL: <code><pre>@url</pre></code>. Facebook\'s servers returned an error @error: <code><pre>@return</pre></code>', array('@url' => $token_url, '@error' => $error, '@return' => $data));
    }
    else {
        // The result from Facebook comes back in a query-string-like format,
        // key1=value1&key2=value2. Parse into an array.
        $authentication_strings = explode('&', $authentication_result->data);
        $authentication_values = array();
        foreach ($authentication_strings as $authentication_string) {
          list($authentication_key, $authentication_value) = explode('=', $authentication_string);
          $authentication_values[$authentication_key] = $authentication_value;
        }
    }
    
    return isset($authentication_values['access_token']) ? $authentication_values['access_token'] : NULL;
}

function customization_graph_query($id, $access_token = NULL, $parameters = array(), $method = 'GET') {
  if (isset($access_token)) {
    $parameters['access_token'] = $access_token;
  }

  if ($method == 'GET' || $method == 'DELETE') {
    $graph_url = url('https://graph.facebook.com/' . $id, array('absolute' => TRUE, 'query' => $parameters));
    $graph_result = drupal_http_request($graph_url, array(), $method);
  }
  elseif ($method == 'POST') {
    $graph_url = 'https://graph.facebook.com/' . $id;
    $post_data = http_build_query($parameters, '', '&');
    $graph_result = drupal_http_request($graph_url, array(), $method, $post_data);
  }
  else {
    drupal_set_message(t('Invalid request type "@type" for Facebook graphy query. Must be either @get, @post, or @delete.', array('@type' => $method, '@get' => 'GET', '@post' => 'POST', '@delete' => 'DELETE')), 'error');
  }

  // If the response contains a redirect (such as to an image), return the
  // redirect as the data. i.e. https://graph.facebook.com/19292868552/picture.
  if (isset($graph_result->redirect_url)) {
    $data = array(
      'data' => $graph_result->data,
      'redirect_code' => $graph_result->redirect_code,
      'redirect_url' => $graph_result->redirect_url,
    );
  }
  else {
    $data = json_decode($graph_result->data);
  }

  return $data;
}

function customization_user($type, &$edit, &$account){
  switch ($type) {
    case 'load':
      //$account->advanced_profile = advanced_profile_load($account->uid);
      if(empty($account->picture) && variable_get('user_picture_default','') != ''){
        $account->picture = variable_get('user_picture_default','');
      }
      break;
    case 'view':
      $account->advanced_profile = advanced_profile_load($account->uid);
      unset($account->content['summary']);
      break;
    default:
      break;
  }  
}

function customization_klicango_search(){
  global $user;
  $results = array();
  
  $term = $_REQUEST['term'];
  if(!empty($term)){
    $events = events_search_results($term);
    $places = places_search_results($term);
    $users = users_search_results($term);
    $uids = array();
    foreach($events as $_event){
      $uids[] = $_event['user_id'];
    }
    $uids = array_merge($uids,  array_keys($places),  array_keys($users));
    $profiles = array();
    if(!empty($uids)){
      $result = db_query('SELECT f.name, f.type, v.value,uid FROM {profile_fields} f INNER JOIN {profile_values} v ON f.fid = v.fid WHERE uid in (%s)', implode(',',$uids));
      while ($field = db_fetch_object($result)) {
        $profiles[$field->uid][$field->name] = _profile_field_serialize($field->type) ? unserialize($field->value) : $field->value;
      }
        
      $result = db_query('SELECT u.picture,u.uid FROM {users} u WHERE uid in (%s)', implode(',',$uids));
      while ($field = db_fetch_object($result)) {
        if(!empty($field->picture))
          $profiles[$field->uid]['picture'] = $field->picture;
        else
          $profiles[$field->uid]['picture'] = variable_get('user_picture_default','');   
      }
      
    }
    
    // Events results
    $user_events = events_get_user_events_with_status(); 
    foreach($events as $_event){
      $start_date = strtotime($_event['field_date_value']);
      $results['events'][$_event['nid']] = array();
      if(!empty($_event['picture']))
        $results['events'][$_event['nid']]['picture'] = theme_imagecache('search_result_image', $_event['picture']);
       
           
      $results['events'][$_event['nid']]['text'] = l($_event['title'], 'node/'.$_event['nid'],array('attributes'=>array('class'=>($_event['field_event_type_value'] == 'private' ? 'private' : '' ))))
      .' '.t('organized by').' '
      .l($profiles[$_event['user_id']]['first_name'].(!empty($profiles[$_event['user_id']]['last_name']) ? ' '. $profiles[$_event['user_id']]['last_name'] : ''), 'user/'.$_event['user_id'])
      .'<br>'.
      date('l F dS, H:i',$start_date);
      
      $results['events'][$_event['nid']]['event'] = $_event;  
      $results['events'][$_event['nid']]['accepted'] = in_array($_event['nid'],$user_events);  
      
    }
                                                                     
    // Places results
    $followed_places = klicango_friends_get_all_followed_places($user->uid);
    foreach($places as $_place){
      $results['places'][$_place['uid']]['picture'] = theme_imagecache('search_result_image', $profiles[$_place['uid']]['picture']);
      $results['places'][$_place['uid']]['text'] = l($_place['value'],'user/'.$_place['uid']).', '.$profiles[$_place['uid']]['address'].' '
                                                  .$profiles[$_place['uid']]['zip'].' '.$profiles[$_place['uid']]['city']
                                                  .'<br>'.$profiles[$_place['uid']]['category'];
      $results['places'][$_place['uid']]['title'] = $_place['value'];
      $results['places'][$_place['uid']]['followed'] = in_array($_place['uid'],$followed_places);
    }
    
    // Users results
    $friends = klicango_friends_get_friends('all');
    foreach($users as $_user){
      $results['users'][$_user->uid]['picture'] = theme_imagecache('search_result_image', $_user->picture);
      $results['users'][$_user->uid]['text'] = l($_user->first_name.' '.$_user->surname,'user/'.$_user->uid);
      if(!empty($profiles[$_user->uid]['city']) || !empty($profiles[$_user->uid]['country']))
        $results['users'][$_user->uid]['text'] .= ', '.$profiles[$_user->uid]['city'].' '.$profiles[$_user->uid]['country'].' ';  
      $results['users'][$_user->uid]['title'] = $_user->first_name.' '.$_user->surname;
      $results['users'][$_user->uid]['friend_status'] =  (in_array($_user->uid, array_keys($friends)) ? $friends[$_user->uid]['status'] : false) ;
    }
  }
  
  
  return theme('search_results',$results); 
  
}

function events_search_results($term='') {
  global $user;
  $number = 20;
  $events = array();
  $available_private_events = get_private_calendar_events_viewed_by_user($user->uid, $user->uid);
  if(!empty($term)){
    $result = db_query('SELECT ev.*, n.title, n.uid as user_id, COUNT(eu.user_id) AS attenders, f.filepath as picture 
                        FROM content_type_event AS ev
                        INNER JOIN node n on n.nid = ev.nid
                        LEFT JOIN content_field_content_images img on n.nid = img.nid
                        LEFT JOIN files f on f.fid = img.field_content_images_fid
                        LEFT JOIN events_users AS eu ON (ev.nid = eu.event_id AND eu.user_id in (SELECT uid FROM users_roles WHERE rid = 6) AND eu.status = 3)
                        WHERE ((ev.field_event_type_value = \'public\' 
                        '.(!empty($available_private_events) ? ') OR (ev.field_event_type_value = \'private\' AND n.nid IN ('.implode(',',$available_private_events).'))' : '').')
                        AND (n.title LIKE "%%%s%%" OR ev.field_location_value LIKE "%%%s%%")
                        GROUP BY ev.nid 
                        ORDER BY attenders DESC
                        LIMIT 0, %d', $term, $term, $number);

    while($event = db_fetch_array($result)) {
        $events[] = $event;
    }
  }
  return $events;
}

function users_search_results($term){
  global $_user;
  $number = 20;
  $users = array();
  if(!empty($term)){
    $result = db_query('
      SELECT uid from (
        SELECT uid from profile_values where (fid=16 OR fid = 17 OR fid = 21) and uid in (SELECT uid from users_roles WHERE rid = 6) AND value like \'%%%s%%\'
        
      UNION
    
        (SELECT  uid
        FROM `users`
        WHERE
          uid in (SELECT uid from users_roles WHERE rid = 6) AND 
          (data REGEXP  \'.*"first_name";s:[0-9]+:"[[:alpha:]]*%s[[:alpha:]]*".*\')
          OR 
          (data REGEXP  \'.*"surname";s:[0-9]+:"[[:alpha:]]*%s[[:alpha:]]*".*\')
          OR
          (data REGEXP  \'.*"city";s:[0-9]+:"[[:alpha:]]*%s[[:alpha:]]*".*\')
        )
      ) t  
      LIMIT %d
        ', $term, $term, $term, $term, $number);
    
    while($row = db_fetch_array($result)) {      
        $_user = user_load($row['uid']);
        $_user->friends_in_common = count(klicango_friends_get_friends_in_common($_user->uid));
        $_user->friends_total = count(klicango_friends_all_friends($_user->uid));
        if(!empty($_user->uid))
          $users[$_user->uid] = $_user;
    }  
    uksort($users,'users_sort_by_friends');
  }
  return $users;  
}

function users_sort_by_friends($a, $b){
  $val = 0;
  if ($a->friends_in_common > $b->friends_in_common) {
    $val = -1;
  }
  elseif($a->friends_in_common < $b->friends_in_common){
    $val = 1;
  }
  else{
    if ($a->friends_total > $b->friends_total) {
      $val = -1;
    }
    elseif($a->friends_total < $b->friends_total){
      $val = 1;
    }
    else{
      $val = strcasecmp($a->first_name.' '.$a->surname, $b->first_name.' '.$b->surname);
    }
  }
  return $val;
}


function places_search_results($term){
  global $_user;
  $number = 20;
  $places = array();
  if(!empty($term)){
    $result = db_query('
      select u.uid, Count(u.uid) as followers, pv.value
      FROM users u
      INNER JOIN profile_values pv on pv.uid = u.uid AND pv.fid = 17
      INNER JOIN profile_values pv2 on pv2.uid = u.uid AND pv2.fid = 21
      INNER JOIN users_roles ur ON ur.uid = u.uid AND rid = 7
      LEFT JOIN friends f on f.uid = u.uid OR f.fid = u.uid
      WHERE (pv.value like \'%%%s%%\' OR pv2.value like \'%%%s%%\')
      group by u.uid, pv.value
      ORDER BY followers DESC
      LIMIT 0, %d', $term, $term, $number);
    
    while($row = db_fetch_array($result)) {
        $places[$row['uid']] = $row;
    }
    
  }
  return $places;  
}

function klicango_send_email($type, $to_uid,  $object){
  global $user;
  profile_load_profile($user);
  $recepient = user_load($to_uid);
  if(!empty($recepient->mail)){
    $text = $subject = ''; 
    switch($type){
      case 'ticket_notification':
        $event = node_load($object->event_id);
        $venue = user_load($event->uid);
        profile_load_profile($venue);
        $pdf = events_generate_pdf_ticket($object->event_id, $object->ticket_type, $to_uid);
        
        $text = '<div style="padding-bottom: 10px;">'.theme_imagecache('search_result_image', $venue->picture).'</div><div style="">';
        $text .= t('You have bought a ticket to').' '.l($event->title, 'node/'.$event->nid, array('absolute'=>TRUE)) . '(' . l($venue->first_name, 'user/'.$venue->uid, array('absolute'=>TRUE)) . ')';
        $text .= '<br>'.date('l, F j H:i', strtotime($event->field_date[0]['value'])).'<br>';
        //$text .= (count($people['going'])+count($people['invited'])).' '.t('people are going');
        $text .= '<br><br><div style="font-size: 80%">'.l(t('View event on Klicango'),'node/'.$event->nid,array('absolute'=>TRUE)).'<br>';
        $text .= '<br><br><div style="font-size: 80%">'.l(t('Print ticket'),'print_coupon/'.$event->nid,array('absolute'=>TRUE, 'target' => '_blank', 'query' => array('uid' => $recepient->uid, 'type' => $object->ticket_type, 'check' => variable_get('ticket_' . $object->event_id . '_' . $object->ticket_type . '_' . $to_uid)))).'<br>';
        $text .= t('This message was sent to ').l($recepient->mail,'mailto:'.$recepient->mail).'</div>';
        $text .= "</div>";
        $text .= "<div style='margin-top:15px; font-size: 80%'>Powered by <img src='http://".$_SERVER['HTTP_HOST']."/profiles/drupal_commons/themes/commons_origins/images/logo.png'></div>";
        
        $subject = t('Ticket to ').' '.$event->title;
        
        $random_hash = md5(date('r', time())); 
        $attach_pdf_multipart = chunk_split( base64_encode( file_get_contents($path) ) );
        if ($pdf && $attach_pdf_multipart) {
          $headers = "\r\nContent-Type: multipart/mixed; boundary=\"PHP-mixed-".$random_hash."\"";       
  
          $msg .= "Content-Type: application/octet-stream; name=\"klicango-ticket.pdf\"\r\n";
          $msg .= "Content-Transfer-Encoding: base64\r\n";
          $msg .= "Content-Disposition: attachment\r\n";
          $msg .= $attach_pdf_multipart . "\r\n";
          $msg .= "Content-Type: text/html; charset=\"utf-8\"\r\n";
          $msg .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
        } else {
          $headers = "Content-Type: text/html; charset=\"utf-8\"\r\n";
          $headers .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
        }
        
        $msg .= $text . "\r\n\r\n";
        mail($recepient->mail, $subject, $msg, $headers);
        return;
        break;
        
      case 'collect_money_notification':
        $event = $object;
        $venue = user_load($event->uid);
        profile_load_profile($venue);
        $to = variable_get('collect_money_to', 'sales@klicango.fr');
        $from = variable_get('collect_money_from', 'no-reply@klicango.fr');
                
        $text = '<div>'.t('!loc_name wants to collect money for !event', array('!loc_name' => l($venue->first_name, 'user/' . $venue->uid, array('absolute' => TRUE)), '!event' => $event->title)).'<br>';
        $text .= date('l, F j H:i', strtotime($event->field_date[0]['value'])).'<br>';
        $text .= l(t('View event on Klicango'),'node/'.$event->nid,array('absolute'=>TRUE)).'<br><br>';
        $text .= t('Total money collected') .' : <strong>' . $event->total . '</strong><br>';
        foreach($event->tickets_sold as $ticket_sold){
              $text .= $ticket_sold['title']. ' (' .$ticket_sold['price'] . ')&euro; :' . $ticket_sold['qty_total'].'<br>'; 
        }

        $text .= "</div>";
        $text .= "<div style='margin-top:15px; font-size: 80%'>Powered by <img src='http://".$_SERVER['HTTP_HOST']."/profiles/drupal_commons/themes/commons_origins/images/logo.png'></div>";
        
        $subject =  t('!loc_name wants to collect money for !event', array('!loc_name' => $venue->first_name, '!event' => $event->title)) ;
        
        $headers = "Content-Type: text/html; charset=\"utf-8\"\r\n";
        $headers .= "From: Klicango system  <" . $from . ">\r\n";
        $headers .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
        
        $msg .= $text . "\r\n\r\n";
        mail($to, $subject, $msg, $headers);
        return;
        break;        
        
      case 'invite_to_event':
        $event = node_load($object->event_id);
        $people = events_get_event_attenders($object->event_id);
        $text = '<div style="padding-bottom: 10px;">'.theme_imagecache('search_result_image', $user->picture).'</div><div style="">';
        $text .= l($user->first_name.' '.$user->surname, 'user/'.$user->uid, array('absolute'=>TRUE)).' '.t('invites you to').' '.l($event->title, 'node/'.$event->nid, array('absolute'=>TRUE));
        $text .= '<br>'.date('l, F j H:i', strtotime($event->field_date[0]['value'])).'<br>';
        $text .= (count($people['going'])+count($people['invited'])).' '.t('people are invited');
        $text .= '<br><br><div style="font-size: 80%">'.l(t('View invitation on Klicango'),'private',array('absolute'=>TRUE)).'<br>';
        $text .= t('This message was sent to ').l($recepient->mail,'mailto:'.$recepient->mail).'</div>';
        $text .= "</div>";
        $text .= "<div style='margin-top:15px; font-size: 80%'>Powered by <img src='http://".$_SERVER['HTTP_HOST']."/profiles/drupal_commons/themes/commons_origins/images/logo.png'></div>";
        
        $subject = t('Invitation to ').' '.$event->title;
        break;
      
      case 'friend_request':
        $text = '<div style="padding-right: 10px;">'.theme_imagecache('search_result_image', $user->picture).'</div><div style="">';
        $text .= l($user->first_name.' '.$user->surname, 'user/'.$user->uid, array('absolute'=>TRUE)).' '.t('wants to be your friend on Klicango.');
        $text .= '<br><br><div style="font-size: 80%">'.l(t('View invitation on Klicango'),'friends',array('absolute'=>TRUE)).'<br>';
        $text .= t('This message was sent to ').l($recepient->mail,'mailto:'.$recepient->mail).'</div>';
        $text .= "</div>";
        $text .= "<div style='margin-top:15px; font-size: 80%'>Powered by <img src='http://".$_SERVER['HTTP_HOST']."/profiles/drupal_commons/themes/commons_origins/images/logo.png'></div>";
        
        $subject = t('Friend request from').' '.$user->first_name.' '.$user->surname;
        break;
      
      case 'public_invitation':
        $event = $object;
        $text = '<div style="padding-bottom: 10px;">'.theme_imagecache('search_result_image', $user->picture).'</div><div style="">';
        $text .= l($user->first_name, 'user/'.$user->uid, array('absolute'=>TRUE)).' '.t('invites you to').' '.l($event->title, 'node/'.$event->nid, array('absolute'=>TRUE));
        $text .= '<br>'.date('l, F j H:i', strtotime($event->field_date[0]['value'])).'<br>';
        //$text .= (count($people['going'])+count($people['invited'])).' '.t('people are going');
        $text .= '<br><br><div style="font-size: 80%">'.l(t('View invitation on Klicango'),'public',array('absolute'=>TRUE)).'<br>';
        $text .= t('This message was sent to ').l($recepient->mail,'mailto:'.$recepient->mail).'</div>';
        $text .= "</div>";
        $text .= "<div style='margin-top:15px; font-size: 80%'>Powered by <img src='http://".$_SERVER['HTTP_HOST']."/profiles/drupal_commons/themes/commons_origins/images/logo.png'></div>";
        
        $subject = t('Invitation to ').' '.$event->title;
        break;
      
     case 'photo_comment':
        $text = '<div style="padding-right: 10px;">'.theme_imagecache('comment_image', $object->file->filepath).'</div><div style="">';
        $text .= l($user->first_name.' '.$user->surname, 'user/'.$user->uid, array('absolute'=>TRUE)).' '.t('commented on your photo.');
        $text .= '<br><br><div style="font-size: 80%">'.l(t('View photo on Klicango'),'node/'.$object->event_id,array('absolute'=>TRUE,'query'=>array('open_photo'=>$object->file->fid))).'<br>';
        $text .= t('This message was sent to ').l($recepient->mail,'mailto:'.$recepient->mail).'</div>';
        $text .= "</div>";
        $text .= "<div style='margin-top:15px; font-size: 80%'>Powered by <img src='http://".$_SERVER['HTTP_HOST']."/profiles/drupal_commons/themes/commons_origins/images/logo.png'></div>";
        
        $subject = t('Comment on your photo');
        break; 
        
       case '':
        break;     
      
    }
    // To send HTML mail, the Content-type header must be set
    $headers  = 'MIME-Version: 1.0' . "\r\n";
    $headers .= 'Content-type: text/html; charset=utf-8' . "\r\n";
    $headers .= 'From: '.$user->first_name.' '.$user->surname.' <'.$user->mail.'>' . "\r\n";
    mail($recepient->mail, $subject, $text, $headers);
    
  }
}
