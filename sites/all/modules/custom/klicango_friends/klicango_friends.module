<?php

function klicango_friends_menu(){
  $items = array();
  
  $items['friends/load'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_load_facebook_friends',
    'access callback' => 'user_is_logged_in',
  );
    
  $items['friends/invite'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_invite_facebook_friends',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['friends/find'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_find',
    'access callback' => 'user_is_logged_in',
  );
  
   $items['follow/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_follow_place',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );
  
   $items['unfollow/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_unfollow_place',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );
    
  return $items;  
}

function klicango_friends_load_facebook_friends() {
    
    $limit = (isset($_GET['limit'])) ? $_GET['limit'] : 10;
    $offset = (isset($_GET['offset'])) ? $_GET['offset'] : 0;
    
    $friends = klicango_friends_get_all_friends();
    
    $html = '';

    if(!empty($friends['local']) && $offset == 0) {
        foreach($friends['local'] as $id => $match) {
            $result = db_query('SELECT picture FROM users WHERE uid = %d', $id);
            $picture = db_result($result);
            
            $html .= '<div class="person-item">';
            $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="/' . $picture . '"/></a></div>';
            $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a></div>';
            $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ', 1)">' . t('Invite friend') . '</a>';
            $html .= '</div>';
        }
    }
    
    $matches = array_slice($friends['facebook'], $offset, $limit, true);
    foreach($matches as $id => $match) {
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="https://graph.facebook.com/' . $id . '/picture"/></a></div>';
        $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a><span class="fb-user">' . t('Friend on facebook') . '</span></div>';
        $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ')">' . t('Invite friend') . '</a>';
        $html .= '</div>';
    }
    
    $new_offset = $offset + $limit;
    if (!empty($_GET['invite'])) {
        $html .= '<div class="show-more-friends"><a class="show_more" href="javascript: void(0);" onclick="loadInviteFriends(' . $new_offset . ', ' . $limit . ')">' . t('Show more friends') . '</a></div>';
    } else {
        $html .= '<div class="show-more-friends"><a class="show_more" href="javascript: void(0);" onclick="loadFriends(' . $new_offset . ', ' . $limit . ')">' . t('Show more friends') . '</a></div>';    
    }
    
    echo $html;
    exit;
}

function klicango_friends_facebook_token() {
    $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');
    $app_secret = isset($app_secret) ? $app_secret : variable_get('fboauth_secret', '');
    
    // Note that the "code" provided by Facebook is a hash based on the client_id,
    // client_secret, and redirect_url. All of these things must be IDENTICAL to
    // the same values that were passed to Facebook in the approval request. See
    // the fboauth_link_properties function.
    $query = array(
        'client_id' => $app_id,
        'client_secret' => $app_secret,
        'grant_type' => 'client_credentials',
    );
    $token_url = url('https://graph.facebook.com/oauth/access_token', array('absolute' => TRUE, 'query' => $query));
    $authentication_result = drupal_http_request($token_url);
    
    if ($authentication_result->code != 200) {
        $error = !empty($authentication_result->error) ? $authentication_result->error : t('(no error returned)');
        $data = !empty($authentication_result->data) ? print_r($authentication_result->data, TRUE) : t('(no data returned)');
        watchdog('fboauth', 'Facebook OAuth could not acquire an access token from Facebook. We queried the following URL: <code><pre>@url</pre></code>. Facebook\'s servers returned an error @error: <code><pre>@return</pre></code>', array('@url' => $token_url, '@error' => $error, '@return' => $data));
    }
    else {
        // The result from Facebook comes back in a query-string-like format,
        // key1=value1&key2=value2. Parse into an array.
        $authentication_strings = explode('&', $authentication_result->data);
        $authentication_values = array();
        foreach ($authentication_strings as $authentication_string) {
          list($authentication_key, $authentication_value) = explode('=', $authentication_string);
          $authentication_values[$authentication_key] = $authentication_value;
        }
    }
    
    return isset($authentication_values['access_token']) ? $authentication_values['access_token'] : NULL;
}

function klicango_friends_graph_query($id, $access_token = NULL, $parameters = array(), $method = 'GET') {
  if (isset($access_token)) {
    $parameters['access_token'] = $access_token;
  }

  if ($method == 'GET' || $method == 'DELETE') {
    $graph_url = url('https://graph.facebook.com/' . $id, array('absolute' => TRUE, 'query' => $parameters));
    $graph_result = drupal_http_request($graph_url, array(), $method);
  }
  elseif ($method == 'POST') {
    $graph_url = 'https://graph.facebook.com/' . $id;
    $post_data = http_build_query($parameters, '', '&');
    $graph_result = drupal_http_request($graph_url, array(), $method, $post_data);
  }
  else {
    drupal_set_message(t('Invalid request type "@type" for Facebook graphy query. Must be either @get, @post, or @delete.', array('@type' => $method, '@get' => 'GET', '@post' => 'POST', '@delete' => 'DELETE')), 'error');
  }

  // If the response contains a redirect (such as to an image), return the
  // redirect as the data. i.e. https://graph.facebook.com/19292868552/picture.
  if (isset($graph_result->redirect_url)) {
    $data = array(
      'data' => $graph_result->data,
      'redirect_code' => $graph_result->redirect_code,
      'redirect_url' => $graph_result->redirect_url,
    );
  }
  else {
    $data = json_decode($graph_result->data);
  }

  return $data;
}

function klicango_friends_preprocess_page(&$variables) {
    if (!empty($_GET['invite']) && !empty($_GET['event_id'])) {
         drupal_add_js('$(document).ready(function(){
            initRequest("' . $_GET['invite'] . '", ' . $_GET['event_id'] . ');
         });', 'inline');         
    }
    
    $variables['menu_stats']['friends_pending'] = klicango_friends_get_pending();
}

function klicango_friends_invite_facebook_friends() {
    if(!empty($_GET['to']) && !empty($_GET['event_id'])) {
        global $user;
        $rows = 0;
        $recipients = $_GET['to'];
        $object = new stdClass();
        $object->sender_id = $user->uid;
        $object->event_id = $_GET['event_id'];
        $object->status = 1;
        foreach ($recipients as $facebook_id) {
            $object->facebook_id = $facebook_id;
            $uid = db_query('SELECT uid FROM fboauth_users WHERE fbid = "%s"', $facebook_id);
            if ($user_id = db_result($uid)) {
                $object->user_id = $user_id;
            }
            
            $result = drupal_write_record('events_users', $object);
            if ($result) {
                $rows++;
            }
        }
        drupal_json(array('success' => true, 'rows' => $rows));
    }
}

function klicango_friends_get_pending() {
    global $user;
    
    $result = db_query('SELECT COUNT(*) AS num FROM friends_invitations WHERE status=1 AND user_id = %d', $user->uid);
    $count = db_result($result);
    
    return $count;
}

function klicango_friends_find() {
    $friends = klicango_friends_get_all_friends();
    $html = '';
    $matches = array_filter($friends['local'], 'array_substring_search');
    foreach($matches as $id => $match) {
        $result = db_query('SELECT picture FROM users WHERE uid = %d', $id);
        $picture = db_result($result);
        
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="/' . $picture . '"/></a></div>';
        $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a></div>';
        $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ')">' . t('Invite friend') . '</a>';
        $html .= '</div>';
    }
    
    $matches = array_filter($friends['facebook'], 'array_substring_search');
    foreach($matches as $id => $match) {
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="https://graph.facebook.com/' . $id . '/picture"/></a></div>';
        $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a><span class="fb-user">' . t('Friend on facebook') . '</span></div>';
        $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ')">' . t('Invite friend') . '</a>';
        $html .= '</div>';
    }
    
    if (!$html) {
        $html = '<div class="show-more-friends">' . t('Friends not found. Try another search request.') . '</div>';
    }
    
    echo $html;
    exit;
}


function array_substring_search($haystack) {
    $needle = $_GET['search'];
    return(stripos($haystack, $needle) !== false); // or stripos() if you want case-insensitive searching.
}



function klicango_friends_get_all_friends() {
    global $user;
    $friends = array();
    $facebook_friends = array();
    $result = db_query('SELECT uid AS id FROM friends WHERE fid = %d UNION SELECT fid AS id FROM friends WHERE uid = %d', $user->uid, $user->uid);
    while ($row = db_fetch_array($result)) {
        if (!isset($friends[$row['id']])) {
            $user = user_load(array('uid' => $row['id']));
            $friends[$row['id']] = $user->first_name . ' ' . $user->surname;
        }
    }

    $facebook_friends = cache_get('facebook_friends_' . $user->uid);   
    if (empty($facebook_friends) || !is_array($facebook_friends)) {
        if (!empty($_SESSION['access_token'])) {
            $facebook_friends = array();
            $offset = 0; 
            $limit = 100;
            do {
                $result = klicango_friends_graph_query('/me/friends?offset=' . $offset . '&limit=' . $limit, $_SESSION['access_token']);  
                $offset += $limit; 
                foreach($result->data as $value) {
                    $facebook_friends[$value->id] = $value->name;
                    $data = array('facebook_id' => $value->id, 'name' => $value->name);
                    drupal_write_record('friends_facebook_invited', $data);
                }              
                 
            } while (!empty($result->data));
            if (is_array($facebook_friends) && !empty($facebook_friends)) {
                cache_set('facebook_friends_' . $user->uid, $facebook_friends, 'cache', time() + 24*60*60);
            }
        }        
    } else {
        $facebook_friends = $facebook_friends->data;
    }
    
    return array('local' => $friends, 'facebook' => $facebook_friends);        
}


function klicango_friends_preprocess_node(&$variables) {
    global $user;
    if($variables['type'] == 'event' && ($variables['uid'] == $user->uid || $variables['field_event_type'][0]['value'] == 'public')) {
        $html = theme('klicango_invite_friends', $variables['nid']);
        $variables['invite_friends_form'] = $html;
    }
}

function klicango_friends_theme() {
    return array(
      'klicango_invite_friends' => array(
        'template' => 'invite-friends',
        'arguments' => array(
        		'event_id' => NULL,
        	),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
    );
}

function klicango_friends_are_friends($uid1, $uid2){
  if(!empty($uid1) && !empty($uid2)){
    $res = db_query("SELECT * FROM friends WHERE (uid = %d AND fid = %d) OR (uid = %d AND fid = %d)", $uid1,$uid2,$uid2,$uid1);
    return ($res->num_rows > 0);
  }
  return false;
}


function klicango_friends_add_friend($fid){
  global $user;
  if(!empty($fid)){
    $data = array('uid' => $user->uid, 'fid' => $fid );
    $res = drupal_write_record('friends', $data);  
  }
  return ($res == SAVED_NEW);
}

function klicango_friends_remove_friend($fid){
  global $user;
  if(!empty($fid)){
    $r = db_query('DELETE FROM {friends} WHERE (uid = %d AND fid = %d) OR (uid = %d AND fid = %d)', $user->uid, $fid, $fid, $user->uid);
  }
  return $r;
}

function klicango_follow_place($place_id){
  $return = array('success' => false);
  if(!empty($place_id)){
    $return['success'] = klicango_friends_add_friend($place_id);
  }
  echo json_encode($return);
  exit;  
}

function klicango_unfollow_place($place_id){
  $return = array('success' => false);
  if(!empty($place_id)){
    $return['success'] = klicango_friends_remove_friend($place_id);
  }
  echo json_encode($return);
  exit;
}

function klicango_friends_all_friends($uid){  
  $friends = array();
  if(!empty($uid)){
    $res = db_query("SELECT DISTINCT(uid) from (SELECT uid FROM friends WHERE (fid = %d) UNION SELECT fid as uid FROM friends WHERE (uid = %d)) t", $uid,$uid);
    while($row = db_fetch_array($res)){
      $friends[] = $row['uid'];
    }
  }
  return $friends;
}