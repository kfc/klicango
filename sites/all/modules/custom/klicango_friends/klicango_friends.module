<?php

function klicango_friends_menu(){
  $items = array();
  
  $items['friends/load'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_load_facebook_friends',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['friends/list'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_show_friends',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['friends_in_common/list'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_show_friends_in_common',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['friends/join'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_join_friends',
    'access callback' => 'user_is_logged_in',
  );
    
  $items['friends/invite'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_invite_facebook_friends',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['friends/invite_local'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_invite_local_friends',
    'access callback' => 'user_is_logged_in',
  );

  $items['friends/check_facebook_invite'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_check_facebook_invite',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['friends/find'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_find',
    'access callback' => 'user_is_logged_in',
  );
  $items['friend/accept'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_friend_accept',
    'access callback' => 'user_is_logged_in',
  );
  $items['friend/decline'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_friend_decline',
    'access callback' => 'user_is_logged_in',
  );
  
   $items['follow/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_follow_place',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );
  
   $items['unfollow/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_unfollow_place',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );
  
  $items['addfriend/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_add_invitation',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );
  
  $items['removefriend/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_remove_invitation',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );
  $items['friends'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'klicango_friends_page',
    'access callback' => 'user_is_logged_in',
  );  
  return $items;  
}

function klicango_friends_load_facebook_friends() {
    
    $limit = (isset($_GET['limit'])) ? $_GET['limit'] : 10;
    $offset = (isset($_GET['offset'])) ? $_GET['offset'] : 0;
    $event_id = $_GET['event_id'];
    
    $friends = klicango_friends_get_all_friends();
    
    $html = '';
    
    if($event_id) {
        $attenders = klicango_friends_invite_get_attenders($event_id);
        $local_ids = $attenders['local_ids'];
        $facebook_ids = $attenders['facebook_ids'];
    }

    if(!empty($friends['local']) && $offset == 0) {
        foreach($friends['local'] as $id => $match) {
            $result = db_query('SELECT picture FROM users WHERE uid = %d', $id);
            $picture = db_result($result);
             if(empty($picture) && variable_get('user_picture_default','') != ''){
              $picture = variable_get('user_picture_default','');
             }
            $friends_count = sizeof(klicango_friends_all_friends($id));
            
            $html .= '<div class="person-item">';
            $html .= '<div class="person-thumbnail"><a href="' . url('user/' . $id) . '"><img src="' . imagecache_create_url('facebook_image_size', $picture) . '"/></a></div>';
            $html .= '<div class="person-name"><a href="' . url('user/' . $id) . '">'.$match.'</a><span class="fb-user" onclick="showFriends(' . $id . ');">' . $friends_count . ' ' . ($friends_count == 1 ? t('friend') : t('friends')) . '</span></div>';
            if (in_array($id, $local_ids)) {
                $html .= '<a href="javascript: void(0);" class="already-invited" style="cursor: default;">' . t('Already invited') . '</a>';
            } else {
                $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ', 1)">' . t('Invite friend') . '</a>';   
            }
            $html .= '</div>';
        }
    }
    
    $matches = array_slice($friends['facebook'], $offset, $limit, true);
    foreach($matches as $id => $match) {
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="https://graph.facebook.com/' . $id . '/picture"/></a></div>';
        $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a><span class="fb-user">' . t('Friend on facebook') . '</span></div>';
        if (in_array($id, $facebook_ids)) {
            $html .= '<a href="javascript: void(0);" class="already-invited" style="cursor: default;">' . t('Already invited') . '</a>';
        } else {
            $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ', 0)">' . t('Invite friend') . '</a>';
        }
        $html .= '</div>';
    }
    
    $new_offset = $offset + $limit;
    if (!empty($_GET['invite'])) {
        $html .= '<div class="show-more-friends"><a class="show_more" href="javascript: void(0);" onclick="loadInviteFriends(' . $new_offset . ', ' . $limit . ', \'event_' . $event_id . '\')">' . t('Show more friends') . '</a></div>';
    } else {
        $html .= '<div class="show-more-friends"><a class="show_more" href="javascript: void(0);" onclick="loadFriends(' . $new_offset . ', ' . $limit . ')">' . t('Show more friends') . '</a></div>';    
    }
    
    echo $html;
    exit;
}

function klicango_friends_join_friends() {
    global $user;    
    
    $limit = (isset($_GET['limit'])) ? $_GET['limit'] : 10;
    $offset = (isset($_GET['offset'])) ? $_GET['offset'] : 0;
    $event_id = $_GET['event_id'];
    
    $friends = klicango_friends_get_all_friends();
    
    $html = '';
    
    $invites = klicango_friends_get_join_invites($user->uid);
    $local_invites = $invites['local'];
    $facebook_invites = $invites['facebook'];
    
    if(!empty($friends['local']) && $offset == 0) {
      $potential_friends = klicango_friends_get_friends_intersections(array_keys($friends['local']));
      
      if (!empty($_GET['search'])) {
        $found = array();
        foreach($potential_friends as $id => $value) {
          $found[$id] = $value['name'];
        }
        $matches = array_filter($found, 'array_substring_search');
        $new_matches = array();
        foreach ($matches as $key => $name) {
          $new_matches[$key] = $potential_friends[$key];
        }
        $potential_friends = $new_matches;
      }
      
      foreach ($potential_friends as $id => $matches) {      
        if (!in_array($matches['id'], $local_invites)) {
          $html .= '<div class="person-item">';
          $html .= '<div class="person-thumbnail"><a href="' . url('user/' . $matches['id']) . '"><img src="' . imagecache_create_url('facebook_image_size', $matches['picture']) . '"/></a></div>';
          $html .= '<div class="person-name"><a href="' . url('user/' . $matches['id']) . '">'.$matches['name'].'</a><span class="fb-user" onclick="showFriends(' . $matches['id'] . ');">' . $matches['common'] . ' ' . ($matches['common'] == 1 ? t('friend in common') : t('friends in common')) . '</span></div>';
          if (in_array($matches['id'], $local_invites)) {
              //$html .= '<a href="javascript: void(0);" class="already-invited" style="cursor: default;">' . t('Friend request sent') . '</a>';
          } else {
              $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteJoinFriend(this, ' . $matches['id'] . ', 1)">' . t('Add friend') . '</a>';   
          }
          $html .= '</div>';
        }
      }
    }
    
    if (empty($_GET['search'])) {
      
      foreach ($facebook_invites as $_id) {
        unset($friends['facebook'][$_id]);
      }
      
      $matches = array_slice($friends['facebook'], $offset, $limit, true);
    } else {
      $matches = array_filter($friends['facebook'], 'array_substring_search');
    }
    
    foreach($matches as $id => $match) {
      if (!in_array($id, $facebook_invites)) {
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="https://graph.facebook.com/' . $id . '/picture"/></a></div>';
        $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a><span class="fb-user">' . t('Friend on facebook') . '</span></div>';
        if (in_array($id, $facebook_invites)) {
            //$html .= '<a href="javascript: void(0);" class="already-invited" style="cursor: default;">' . t('Friend request sent') . '</a>';
        } else {
            $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteJoinFriend(this, ' . $id . ', 0)">' . t('Add friend') . '</a>';
        }
        $html .= '</div>';
      }
    }
    
    $new_offset = $offset + $limit;
    if ($html) {
      $html .= '<div class="show-more-friends"><a class="show_more" href="javascript: void(0);" onclick="loadJoinFriends(' . $new_offset . ', ' . $limit . ')">' . t('Show more friends') . '</a></div>';
    } else {
      $html .= '<div class="show-more-friends">' . t('No potential friends found') . '</div>';
    }
    
    echo $html;
    exit;
}

function klicango_friends_facebook_token() {
    $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');
    $app_secret = isset($app_secret) ? $app_secret : variable_get('fboauth_secret', '');
    
    // Note that the "code" provided by Facebook is a hash based on the client_id,
    // client_secret, and redirect_url. All of these things must be IDENTICAL to
    // the same values that were passed to Facebook in the approval request. See
    // the fboauth_link_properties function.
    $query = array(
        'client_id' => $app_id,
        'client_secret' => $app_secret,
        'grant_type' => 'client_credentials',
    );
    $token_url = url('https://graph.facebook.com/oauth/access_token', array('absolute' => TRUE, 'query' => $query));
    $authentication_result = drupal_http_request($token_url);
    
    if ($authentication_result->code != 200) {
        $error = !empty($authentication_result->error) ? $authentication_result->error : t('(no error returned)');
        $data = !empty($authentication_result->data) ? print_r($authentication_result->data, TRUE) : t('(no data returned)');
        watchdog('fboauth', 'Facebook OAuth could not acquire an access token from Facebook. We queried the following URL: <code><pre>@url</pre></code>. Facebook\'s servers returned an error @error: <code><pre>@return</pre></code>', array('@url' => $token_url, '@error' => $error, '@return' => $data));
    }
    else {
        // The result from Facebook comes back in a query-string-like format,
        // key1=value1&key2=value2. Parse into an array.
        $authentication_strings = explode('&', $authentication_result->data);
        $authentication_values = array();
        foreach ($authentication_strings as $authentication_string) {
          list($authentication_key, $authentication_value) = explode('=', $authentication_string);
          $authentication_values[$authentication_key] = $authentication_value;
        }
    }
    
    return isset($authentication_values['access_token']) ? $authentication_values['access_token'] : NULL;
}

function klicango_friends_graph_query($id, $access_token = NULL, $parameters = array(), $method = 'GET') {
  if (isset($access_token)) {
    $parameters['access_token'] = $access_token;
  }

  if ($method == 'GET' || $method == 'DELETE') {
    $graph_url = url('https://graph.facebook.com/' . $id, array('absolute' => TRUE, 'query' => $parameters));
    $graph_result = drupal_http_request($graph_url, array(), $method);
  }
  elseif ($method == 'POST') {
    $graph_url = 'https://graph.facebook.com/' . $id;
    $post_data = http_build_query($parameters, '', '&');
    $graph_result = drupal_http_request($graph_url, array(), $method, $post_data);
  }
  else {
    drupal_set_message(t('Invalid request type "@type" for Facebook graphy query. Must be either @get, @post, or @delete.', array('@type' => $method, '@get' => 'GET', '@post' => 'POST', '@delete' => 'DELETE')), 'error');
  }

  // If the response contains a redirect (such as to an image), return the
  // redirect as the data. i.e. https://graph.facebook.com/19292868552/picture.
  if (isset($graph_result->redirect_url)) {
    $data = array(
      'data' => $graph_result->data,
      'redirect_code' => $graph_result->redirect_code,
      'redirect_url' => $graph_result->redirect_url,
    );
  }
  else {
    $data = json_decode($graph_result->data);
  }

  return $data;
}

function klicango_friends_preprocess_page(&$variables) {
    if (!empty($_GET['invite']) && !empty($_GET['event_id'])) {
         drupal_add_js('$(document).ready(function(){
            initRequest("' . $_GET['invite'] . '", ' . $_GET['event_id'] . ');
         });', 'inline');         
    }
    
    $variables['menu_stats']['friends_pending'] = klicango_friends_get_pending();
}

function klicango_friends_invite_local_friends($data = array()) {    
    global $user;
    
    $ajax = true;
    if (!empty($data)) {
        $ajax = false;
    }
    
    if((!empty($_GET['to']) && !empty($_GET['event_id'])) || (!empty($data['event_id']) && !empty($data['to']))) {
        $rows = 0;
        $invited = 0;
        
        if (empty($data)) {
            $data['event_id'] = $_GET['event_id'];
            $data['to'] = $_GET['to'];
        }
        
        $recipients = explode(',', $data['to']);
        $object = new stdClass();
        $object->sender_id = $user->uid;
        $object->event_id = $data['event_id'];
        $object->status = 1;
        foreach ($recipients as $local_uid) {
            if ($local_uid) {
                $object->user_id = $local_uid;
                $is_invited = db_result(db_query('SELECT user_id FROM events_users WHERE event_id = %d AND user_id = %d', $object->event_id, $local_uid));
                if (!$is_invited) {
                    $result = drupal_write_record('events_users', $object);
                    if ($result) {
                        $rows++;
                    }
                } else {
                    $invited++;
                }
            }
        }
        $response = array('success' => true, 'rows' => $rows, 'invited' => $invited);
        if ($ajax) {
            drupal_json($response);
            exit;
        } else {
            return $response;
        }
    } else if (!empty($_GET['to']) && empty($_GET['event_id'])) {
      $recipients = explode(',', $_GET['to']);
      foreach ($recipients as $recipient) {
        if ($recipient) {
          $rows = $invites = $invited = 0;
          if(!klicango_friends_are_friends($user->uid, $recipient)) {
            $rst = klicango_friends_add_invitation($recipient, false);
            $rows++;
            if ($rst['success']) {
              $invites++;
            } else {
              $invited++;
            }
          } else {
            $invited++;
          } 
        }
      } 
      $response = array('success' => true, 'rows' => $rows, 'already_invited' => $invited, 'invites_sent' => $invites);
      drupal_json($response);
      exit;
    }
}

function klicango_friends_invite_facebook_friends() {
    if(!empty($_GET['to'])) {
        global $user;
        $rows = 0;
        $invited = 0;
        $recipients = $_GET['to'];
        $object = new stdClass();
        $object->sender_id = $user->uid;
        $object->status = 1;
        foreach ($recipients as $facebook_id) {
            $object->facebook_id = $facebook_id;
            $uid = db_query('SELECT uid FROM fboauth_users WHERE fbid = "%s"', $facebook_id);
            if ($user_id = db_result($uid)) {
                $object->user_id = $user_id;
            }
            
            $fr_rst = klicango_friends_add_invitation($facebook_id, false, true);
            
            if (!empty($_GET['event_id'])) {
              $object->event_id = $_GET['event_id'];
              $is_invited = db_result(db_query('SELECT facebook_id FROM events_users WHERE event_id = %d AND facebook_id = %s', $object->event_id, $facebook_id));
              if (!$is_invited) {
                  $result = drupal_write_record('events_users', $object);
                  if ($result) {
                      $rows++;
                  }
              } else {
                  $invited++;
              }
            } else {
              if ($fr_rst['success']) {
                $rows++;
              }
            }
        }
        drupal_json(array('success' => true, 'rows' => $rows, 'invited' => $invited));
    }
}

function klicango_friends_get_pending() {
    global $user;
    
    $result = db_query('SELECT COUNT(*) AS num FROM friends_invitations WHERE status=1 AND user_id = %d', $user->uid);
    $count = db_result($result);
    
    return $count;
}

function klicango_friends_find() {
    $friends = klicango_friends_get_all_friends();
    $html = '';
    $matches = array_filter($friends['local'], 'array_substring_search');
    
    $event_id = $_GET['event_id'];
    if($event_id) {
        $attenders = klicango_friends_invite_get_attenders($event_id);
        $local_ids = $attenders['local_ids'];
        $facebook_ids = $attenders['facebook_ids'];
    }
    
    foreach($matches as $id => $match) {
        $result = db_query('SELECT picture FROM users WHERE uid = %d', $id);
        $picture = db_result($result);
        
         if(empty($picture) && variable_get('user_picture_default','') != ''){
          $picture = variable_get('user_picture_default','');
          }
        
        $friends_count = sizeof(klicango_friends_all_friends($id));
        
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="' . url('user/' . $id) . '"><img src="' . imagecache_create_url('facebook_image_size', $picture) . '"></a></div>';
        $html .= '<div class="person-name"><a href="' . url('user/' . $id) . '">'.$match.'</a><span class="fb-user" onclick="showFriends(' . $id . ');">' . $friends_count . ' ' . ($friends_count == 1 ? t('friend') : t('friends')) . '</span></div>';
        
        if (in_array($id, $local_ids)) {
            $html .= '<a href="javascript: void(0);" class="already-invited" style="cursor: default;">' . t('Already invited') . '</a>';
        } else {
            $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ', 1)">' . t('Invite friend') . '</a>';   
        }
                
        $html .= '</div>';
    }
    
    $matches = array_filter($friends['facebook'], 'array_substring_search');
    foreach($matches as $id => $match) {
        $html .= '<div class="person-item">';
        $html .= '<div class="person-thumbnail"><a href="javascript: void(0);"><img src="https://graph.facebook.com/' . $id . '/picture"/></a></div>';
        $html .= '<div class="person-name"><a href="javascript: void(0);">'.$match.'</a><span class="fb-user">' . t('Friend on facebook') . '</span></div>';
        
        if (in_array($id, $facebook_ids)) {
            $html .= '<a href="javascript: void(0);" class="already-invited" style="cursor: default;">' . t('Already invited') . '</a>';
        } else {
            $html .= '<a href="javascript: void(0);" class="invite-friend" onclick="inviteFriend(this, ' . $id . ', 0)">' . t('Invite friend') . '</a>';
        }
        
        $html .= '</div>';
    }
    
    if (!$html) {
        $html = '<div class="show-more-friends">' . t('Friends not found. Try another search request.') . '</div>';
    }
    
    echo $html;
    exit;
}


function array_substring_search($haystack) {
    $needle = $_GET['search'];
    return(stripos($haystack, $needle) !== false); // or stripos() if you want case-insensitive searching.
}



function klicango_friends_get_all_friends() {
    global $user;
    $friends = array();
    $facebook_friends = array();
    $result = db_query('SELECT uid AS id FROM friends WHERE fid = %d UNION SELECT fid AS id FROM friends WHERE uid = %d', $user->uid, $user->uid);
    while ($row = db_fetch_array($result)) {
        if (!isset($friends[$row['id']])) {
            $other_user = user_load(array('uid' => $row['id']));
            if (in_array('individual', $other_user->roles, true)) {
                $friends[$row['id']] = $other_user->first_name . ' ' . $other_user->surname;
            }
        }
    }

    $facebook_friends = cache_get('facebook_friends_' . $user->uid);   
    if (empty($facebook_friends) || !is_array($facebook_friends)) {
        if (!empty($_SESSION['access_token'])) {
            $facebook_friends = array();
            $offset = 0; 
            $limit = 100;
            do {
                $result = klicango_friends_graph_query('/me/friends?offset=' . $offset . '&limit=' . $limit, $_SESSION['access_token']);  
                $offset += $limit; 
                foreach($result->data as $value) {
                    $facebook_friends[$value->id] = $value->name;
                    $data = array('facebook_id' => $value->id, 'name' => $value->name);
                    drupal_write_record('friends_facebook_invited', $data);
                }              
                 
            } while (!empty($result->data));
            if (is_array($facebook_friends) && !empty($facebook_friends)) {
                cache_set('facebook_friends_' . $user->uid, $facebook_friends, 'cache', time() + 24*60*60);
                cache_set('permanent_facebook_friends_' . $user->uid, $facebook_friends, 'cache');
            }
        } else {
          $facebook_friends = cache_get('permanent_facebook_friends_' . $user->uid);
          $facebook_friends = $facebook_friends->data;
        }        
    } else {
        $facebook_friends = $facebook_friends->data;
    }
    
    //unset facebook friends already registered on klicango and already a friend of the user
    
    $facebook_local = db_query('SELECT fbid FROM fboauth_users WHERE fbid IN (' . implode(',', array_keys($facebook_friends)) . ') 
                                AND uid IN (' . implode(',', array_keys($friends)) . ')');
    while ($local_fid = db_fetch_array($facebook_local)) {
        unset($facebook_friends[$local_fid['fbid']]);
        
    }
    return array('local' => $friends, 'facebook' => $facebook_friends);        
}


function klicango_friends_preprocess_node(&$variables) {
    global $user;
    if($variables['type'] == 'event' && ($variables['uid'] == $user->uid || $variables['field_event_type'][0]['value'] == 'public')) {
        $html = theme('klicango_invite_friends', $variables['nid']);
        $variables['invite_friends_form'] = $html;
    }
}

function klicango_friends_theme() {
    return array(
      'klicango_invite_friends' => array(
        'template' => 'invite-friends',
        'arguments' => array(
        		'event_id' => NULL,
        	),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'klicango_friends_invitations' => array(
        'template' => 'klicango-friends-invitations',
        'arguments' => array('users' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'klicango_friends_show' => array(
        'template' => 'show-friends-form',
        'arguments' => array('users' => NULL, 'user_id' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),  
      'klicango_friends_friends' => array(
        'template' => 'klicango-friends-friends',
        'arguments' => array('users' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ), 
      'klicango_friends_in_common_show' => array(
        'template' => 'show-friends-in-common-form',
        'arguments' => array('users' => NULL, 'user_id' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),  
    );
}

function klicango_friends_are_friends($uid1, $uid2){
  if(!empty($uid1) && !empty($uid2)){
    $res = db_query("SELECT * FROM friends WHERE (uid = %d AND fid = %d) OR (uid = %d AND fid = %d)", $uid1,$uid2,$uid2,$uid1);
    return ($res->num_rows > 0);
  }
  return false;
}


function klicango_friends_add_friend($fid){
  global $user;
  if(!empty($fid)){
    $data = array('uid' => $user->uid, 'fid' => $fid );
    $res = drupal_write_record('friends', $data);  
  }
  return ($res == SAVED_NEW);
}

function klicango_friends_remove_friend($fid){
  global $user;
  if(!empty($fid)){
    $r = db_query('DELETE FROM {friends} WHERE (uid = %d AND fid = %d) OR (uid = %d AND fid = %d)', $user->uid, $fid, $fid, $user->uid);
  }
  return $r;
}

function klicango_follow_place($place_id){
  $return = array('success' => false);
  if(!empty($place_id)){
    global $user;
    $data = array('sender_id' => $user->uid, 'user_id' => $place_id, 'status' => 1);
    $res = drupal_write_record('friends_invitations', $data);
    
    $return['success'] = klicango_friends_add_friend($place_id);
  }
  echo json_encode($return);
  exit;  
}

function klicango_unfollow_place($place_id){
  $return = array('success' => false);
  if(!empty($place_id)){
    //remove invitation as well
    global $user;
    $result2 = db_query('DELETE FROM friends_invitations WHERE (sender_id = %d AND user_id = %d) OR (sender_id = %d AND user_id = %d)', $user->uid, $place_id, $place_id, $user->uid);
    
    $return['success'] = klicango_friends_remove_friend($place_id);
  }
  echo json_encode($return);
  exit;
}

function klicango_friends_all_friends($uid){  
  $friends = array();
  if(!empty($uid)){
    $res = db_query("SELECT DISTINCT(uid) from (
                        SELECT uid FROM friends WHERE (fid = %d) AND uid IN (SELECT uid FROM users_roles WHERE rid = 6)
                        UNION 
                        SELECT fid as uid FROM friends WHERE (uid = %d) AND fid IN (SELECT uid FROM users_roles WHERE rid = 6)
                    ) t", $uid,$uid);
    while($row = db_fetch_array($res)){
      $friends[] = $row['uid'];
    }
  }
  return $friends;
}

function klicango_friends_add_invitation($fid, $ajax = true, $facebook = false) {
    // TODO: Check duplicate friend invitations
    
    global $user;
    $return = array('success' => false);
    if (!$facebook) {
      $result = db_query('SELECT id FROM friends_invitations WHERE (sender_id = %d AND user_id = %d) OR (sender_id = %d AND user_id = %d)', $user->uid, $fid, $fid, $user->uid);
    } else {
      $result = db_query('SELECT id FROM friends_invitations WHERE (sender_id = %d AND facebook_id = %d) OR (sender_id = %d AND facebook_id = %d)', $user->uid, $fid, $fid, $user->uid);
    }
    if (!$is_friend = db_result($result)) {
        if (!$facebook) {
          $data = array('sender_id' => $user->uid, 'user_id' => $fid, 'status' => 1);
        } else {
          $data = array('sender_id' => $user->uid, 'facebook_id' => $fid, 'status' => 1);
        }
        $return['success'] = drupal_write_record('friends_invitations', $data);
    } else {
        $return['success'] = false;
    }
    
    if ($ajax) {
        echo json_encode($return);
        exit; 
    } else {
        return $return;
    }
}

function klicango_friends_remove_invitation($fid) {
    global $user;
    $return = array('success' => false);
    if(!empty($fid)){
        $result1 = klicango_friends_remove_friend($fid);
        $result2 = db_query('DELETE FROM friends_invitations WHERE (sender_id = %d AND user_id = %d) OR (sender_id = %d AND user_id = %d)', $user->uid, $fid, $fid, $user->uid);
        $return['success'] = ($result1 && $result2);
    }
    echo json_encode($return);
    exit;    
}

function klicango_friends_invitation_sent($uid1, $uid2) {
    if(!empty($uid1) && !empty($uid2)){
        $res = db_query("SELECT * FROM friends_invitations WHERE (sender_id = %d AND user_id = %d) OR (sender_id = %d AND user_id = %d)", $uid1,$uid2,$uid2,$uid1);
        return ($res->num_rows > 0);
    }
    return false; 
}

function klicango_friends_page() {
    $html = '';
    global $user;
    
    $users = array();
    $ids = klicango_friends_get_friends('invitations_received');
    if (!empty($ids)) {
        foreach ($ids as $friend) {
            $friend_data = user_load($friend);
            profile_load_profile($friend_data);
            $users[] = $friend_data;
        }
    }
    
    $html .= theme('klicango_friends_invitations', $users);
    
    $users = array();
    if (in_array('professional', $user->roles)) {
      $ids = klicango_friends_get_friends('friends', 16);
    } else {
      $ids = klicango_friends_get_friends('friends', 16, true);
    }
    if (!empty($ids)) {
        foreach ($ids as $friend) {
            $friend_data = user_load($friend);
            profile_load_profile($friend_data);
            $friend_data->friends_count = sizeof(klicango_friends_all_friends($friend));
            $users[] = $friend_data;
        }
    }
    
    $html .= theme('klicango_friends_friends', $users, false);
    
    $html .= theme('klicango_invite_friends', 0);
    
    //If it is a business user automatically update invitations to accepted
    if (in_array('professional', $user->roles)) {
      db_query('UPDATE friends_invitations SET status = 3 WHERE user_id = %d AND status = 1', $user->uid);
    }
    
    return $html;
}

function klicango_friends_get_friends($type, $limit = false, $only_individual = false) {
    global $user;
    $users = array();
    switch($type) {
        case 'invitations_received' : 
            $result = db_query('SELECT sender_id FROM friends_invitations WHERE user_id = %d AND status = 1', $user->uid);
            while ($row = db_fetch_array($result)) {
                $users[] = $row['sender_id'];
            }
            break; 
            
        case 'invitations_sent' : 
            $result = db_query('SELECT user_id  FROM friends_invitations WHERE sender_id = %d AND status = 1', $user->uid);
            while ($row = db_fetch_array($result)) {
                $users[] = $row['user_id'];
            }
            break;     
        case 'friends' : 
          if (!$only_individual) {
              if ($limit) {
                $result = db_query('(SELECT user_id AS uid FROM friends_invitations WHERE sender_id = %d AND status = 3)
                                  UNION (SELECT sender_id AS uid FROM friends_invitations WHERE user_id = %d AND status = 3)
                                  ORDER BY RAND() LIMIT 0, %d', $user->uid, $user->uid, $limit);  
              } else {
                $result = db_query('SELECT user_id AS uid FROM friends_invitations WHERE sender_id = %d AND status = 3
                                  UNION SELECT sender_id AS uid FROM friends_invitations WHERE user_id = %d AND status = 3', $user->uid, $user->uid);
              }
              
            } else {
              if ($limit) {
                $result = db_query('(SELECT user_id AS uid FROM friends_invitations WHERE sender_id = %d AND status = 3 AND 
                                  user_id IN (SELECT uid FROM users_roles WHERE rid = 6))
                                  UNION (SELECT sender_id AS uid FROM friends_invitations WHERE user_id = %d AND status = 3
                                  AND user_id IN (SELECT uid FROM users_roles WHERE rid = 6))
                                  ORDER BY RAND() LIMIT 0, %d', $user->uid, $user->uid, $limit);
              }
            }
            while ($row = db_fetch_array($result)) {
                $users[] = $row['uid'];
            }
            break; 
    }
    return $users;
}

function klicango_friends_friend_accept() {
    global $user;
    $sender_id = $_GET['sender_id'];
    $status = $_GET['status'];
    if ($status == 'new') {
        $inv_status = 1;
        db_query('DELETE FROM friends WHERE uid = %d AND fid = %d', $sender_id, $user->uid);
    } else {
        $data = array('uid' => $sender_id, 'fid' => $user->uid);
        drupal_write_record('friends', $data);
        $inv_status = 3;
    }
    $result = db_query('UPDATE friends_invitations SET status = %d WHERE sender_id = %d AND user_id = %d', $inv_status, $sender_id, $user->uid);
    drupal_json(array('status' => $result));
    exit;
}

function klicango_friends_friend_decline() {
    global $user;
    $sender_id = $_GET['sender_id'];
    $result = db_query('UPDATE friends_invitations SET status = 4 WHERE sender_id = %d AND user_id = %d', $sender_id, $user->uid);
    db_query('DELETE FROM friends WHERE uid = %d AND fid = %d', $sender_id, $user->uid);
    drupal_json(array('status' => $result));
    exit;
}

function klicango_friends_check_facebook_invite() {
    if(!empty($_GET['to'])) {
        $ids = rtrim($_GET['to'],',');
        $ids_arr = explode(',', $ids);
        
        $result = db_query('SELECT uid, fbid FROM fboauth_users WHERE fbid IN (' . mysql_escape_string($ids) . ')');
        while($user = db_fetch_array($result)) {
            $friend_inv = klicango_friends_add_invitation($user['uid'], false);
            if (!empty($_GET['event_id'])) {
              $event_id = $_GET['event_id'];
              $event_inv = klicango_friends_invite_local_friends(array('event_id' => $event_id, 'to' => $user['uid']));
            }
            if(($key = array_search($user['fbid'], $ids_arr)) !== false) {
                unset($ids_arr[$key]);
            }
        }
        drupal_json(array('success' => true, 'ids' => implode(',', $ids_arr)));
        exit;
    } 
    drupal_json(array('success' => false));
    exit;
}

function klicango_friends_invite_get_attenders($event_id) {
  $event_id = explode('_', $event_id);
  $event_id = $event_id[1];
  $attenders = events_get_event_attenders($event_id);
  $local_ids = array_keys($attenders['going']);
  $facebook_ids = array();
  
  foreach ($attenders['invited'] as $key => $value) {
      if (!empty($value['user_id'])) {
          $local_ids[] = $value['user_id'];
      } else if (!empty($value['facebook_id'])) {
          $facebook_ids[] = $value['facebook_id'];
      }
  }
  
  return array('local_ids' => $local_ids, 'facebook_ids' => $facebook_ids);
}

function klicango_friends_get_friends_intersections($friends) {
  global $user;
  
  $common = array();
  $result = db_query('SELECT users.uid, users.picture, COUNT(friends.fid) AS common FROM users 
                     LEFT JOIN friends ON users.uid = friends.uid 
                     WHERE friends.fid IN (' . implode(', ', $friends) . ') AND users.uid != %d
                     GROUP BY users.uid', $user->uid);
  while ($_user = db_fetch_array($result)) {
    $other_user = user_load(array('uid' => $_user['uid']));
    if(empty($_user['picture']) && variable_get('user_picture_default','') != ''){
      $_user['picture'] = variable_get('user_picture_default','');
    }
    if (in_array('individual', $other_user->roles, true)) {
      $common[$_user['uid']]['common'] = $_user['common'];
      $common[$_user['uid']]['id'] = $_user['uid'];
      $common[$_user['uid']]['picture'] = $_user['picture'];
      $common[$_user['uid']]['name'] = $other_user->first_name . ' ' . $other_user->surname;
    } 
  }
  
  $result = db_query('SELECT users.uid, users.picture, COUNT(friends.uid) AS common FROM users 
                     LEFT JOIN friends ON users.uid = friends.fid 
                     WHERE friends.uid IN (' . implode(', ', $friends) . ') AND users.uid != %d
                     GROUP BY users.uid', $user->uid);
  while ($_user = db_fetch_array($result)) {
    if (!empty($common[$_user['uid']])) {
      $common[$_user['uid']]['common'] += $_user['common'];
    } else {
      $other_user = user_load(array('uid' => $_user['uid']));
      if(empty($_user['picture']) && variable_get('user_picture_default','') != ''){
       $_user['picture'] = variable_get('user_picture_default','');
      }
      if (in_array('individual', $other_user->roles, true)) {
        $common[$_user['uid']]['common'] = $_user['common'];
        $common[$_user['uid']]['id'] = $_user['uid'];
        $common[$_user['uid']]['picture'] = $_user['picture'];
        $common[$_user['uid']]['name'] = $other_user->first_name . ' ' . $other_user->surname;
      }
    } 
  }
  
  usort($common, 'sortByCommon');
  
  function sortByCommon($a, $b) {
      return $a['common'] - $b['common'];
  }
  
  return $common;
}

function klicango_friends_get_join_invites ($uid) {
  $local = $facebook = array();
  $result = db_query('SELECT user_id FROM friends_invitations WHERE sender_id = %d AND user_id IS NOT NULL', $uid);
  while ($user = db_fetch_array($result)) {
    $local[] = $user['user_id'];
  }
  
  $result = db_query('SELECT facebook_id FROM friends_invitations WHERE sender_id = %d AND facebook_id IS NOT NULL', $uid);
  while ($user = db_fetch_array($result)) {
    $facebook[] = $user['facebook_id'];
  }
  
  return array('local' => $local, 'facebook' => $facebook);
}

function klicango_friends_show_friends() {
  $user_id = $_GET['uid'];
  $users = array();
  if ($user_id) {
    $friends = klicango_friends_all_friends($user_id);
    
    foreach ($friends as $friend) {
      $_user = user_load($friend);
      if(empty($_user->picture) && variable_get('user_picture_default','') != ''){
        $_user->picture = variable_get('user_picture_default','');
      }
      if (in_array('individual', $_user->roles)) {
        //profile_load_profile($_user);
        $_user->picture_url = imagecache_create_url('facebook_image_size', $_user->picture);
        $_user->friends_count = sizeof(klicango_friends_all_friends($friend));
        $_user->name = $_user->first_name . ' ' . $_user->surname;
        $users[] = $_user;
      }
    }
  }
  $html = theme('klicango_friends_show', $users, $user_id);
  echo $html;
  exit;
}

function klicango_friends_add_friend_button($uid) {
  global $user;
  if ($user->uid) {
    if (klicango_friends_are_friends($user->uid, $uid)) {
      $html = '<a class="already-invited" href="javascript: void(0);">' . t('Already friends') . '</a>';
    } else if (klicango_friends_request_sent($user->uid, $uid)) {
      $html = '<a class="already-invited" href="javascript: void(0);">' . t('Friend request sent') . '</a>';
    } else if ($user->uid == $uid) {
      $html = '';
    } else {
      $html = '<a href="javascript: void(0);" class="invite-friend" onclick="inviteJoinFriendSubmit(this, ' . $uid . ')">' . t('Add friend') . '</a>'; 
    }
  } else {
    $html = '';
  }
  
  return $html;
}

function klicango_friends_request_sent($uid1, $uid2) {
  $result = db_query('SELECT id FROM friends_invitations WHERE (sender_id = %d AND user_id = %d) OR (sender_id = %d AND user_id = %d) AND status = 1', $uid1, $uid2, $uid2, $uid1);
  if ($result->num_rows) {
    return true;
  } else {
    return false;
  }
}

function klicango_friends_get_friends_in_common($uid){
  global $user;
    $users_in_common = array();
    $result = db_query('SELECT t1.u1 as uid from 
      (select uid as u1 from friends where fid = %d UNION select fid as u1 from friends where uid = %d) t1
        INNER JOIN
      (select uid as u2 from friends where fid = %d UNION select fid as u2 from friends where uid = %d) t2 
      on t1.u1 = t2.u2
      
      ', $user->uid, $user->uid, $uid, $uid);
    while ($_user = db_fetch_array($result)) {
      $users_in_common[] = $_user['uid'];
    }
    return $users_in_common;
}

function klicango_friends_show_friends_in_common() {
  $user_id = $_GET['uid'];
  $users = array();
  if ($user_id) {
    $friends = klicango_friends_get_friends_in_common($user_id);
    
    foreach ($friends as $friend) {
      $_user = user_load($friend);
      if(empty($_user->picture) && variable_get('user_picture_default','') != ''){
        $_user->picture = variable_get('user_picture_default','');
      }
      if (in_array('individual', $_user->roles)) {
        //profile_load_profile($_user);
        $_user->picture_url = imagecache_create_url('facebook_image_size', $_user->picture);
        $_user->name = $_user->first_name . ' ' . $_user->surname;
        $users[] = $_user;
      }
    }
  }
  $html = theme('klicango_friends_in_common_show', $users, $user_id);
  echo $html;
  exit;
}


function klicango_friends_get_all_users($type = 'individual'){
  $users = array();
  $result = db_query("SELECT uid from {users_roles} where rid = (SELECT rid FROM role WHERE name = '%s' )", $type);
  while ($_user = db_fetch_array($result)) {
    $users[] = $_user['uid'];
  }
  return $users;  
}

function klicango_friends_get_all_followed_places($user_id){ 
  $users = array();
  $result = db_query('SELECT id from (SELECT uid AS id FROM friends WHERE fid = %d UNION SELECT fid AS id FROM friends WHERE uid = %d) t INNER JOIN users_roles r on r.uid = t.id AND r.rid = 7', $user_id, $user_id);
  while ($_user = db_fetch_array($result)) {
    $users[] = $_user['id'];
  }
  return $users;  
}