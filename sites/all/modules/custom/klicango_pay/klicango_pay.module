<?php

define ("PAYBOX_INIT", "init");
define ("PAYBOX_LOCK", "lock");
define ("PAYBOX_SUCCESS", "succ");
define ("PAYBOX_FAIL", "fail");
define ("PAYBOX_CANCEL", "canc");

/**
 * Implements hook_menu().
 */
function klicango_pay_menu() {
  $items['admin/settings/klicango-pay'] = array(
    'title' => 'Klicango paybox settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('klicango_pay_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'klicango_pay.admin.inc',
  );
  
  $items['admin/settings/klicango-pay/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/settings/klicango-pay/test'] =   array(
    'title' => 'Test settings',
    'page callback' => 'klicango_pay_test_settings',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'klicango_pay.admin.inc',
  ); 
  
  $items['admin/settings/klicango-pay/send'] =   array(
    'title' => 'Send request',
    'page callback' => 'klicango_pay_send_request',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'klicango_pay.admin.inc',
  );
  
  $items['paybox_back_page'] = array(
    'type' =>  MENU_CALLBACK,  
    'page callback' => '_klicango_pay_back_page',
    'access callback' => TRUE,
  );
  
  $items['paybox_process_page'] = array(
    'type' =>  MENU_CALLBACK,  
    'page callback' => '_klicango_pay_process_pay',
    'access callback' => TRUE,
  );
  
  $items['paybox_process_auto'] = array(
    'type' =>  MENU_CALLBACK,
    'page callback' => 'klicango_pay_offsite_auto',
    //'access callback' => 'klicango_pay_is_paybox_server',
    'access callback' => TRUE,
  );  
     
  return $items;
}

function klicango_pay_generate_hmac($key, $msg){
    // the key is in ASCII, We transform it into binary
    $binKey = pack("H*", $key);

    // We calculate the imprint (to inform in the parameter PBX_HMAC) thanks to the function hash_hmac and the binary key
    // We send via the variable PBX_HASH the algorithm of hashing which was used (SHA512 in this case)
    // To show the list of the algorithms available on your environment, decommentez the following line
    // print_r(hash_algos());
    $hmac = strtoupper(hash_hmac('sha512', $msg, $binKey));
    return $hmac;
    
}

function _klicango_pay_back_page(){
    $destination = $_GET['destination'];
    $result = $_GET['result'];
    $row = new stdClass();
    $pid = _paybox_get_pid_by_ref($_GET['order']);
    switch ($result) {
        case 'effectue' :
            $order = klicango_pay_order_load($pid);
            $order->status = ($order->status == PAYBOX_SUCCESS) ? PAYBOX_SUCCESS : PAYBOX_LOCK;
            klicango_pay_order_save($order);       
            break;
        case 'refuse' :
            $order = klicango_pay_order_load($pid);
            $order->status = PAYBOX_FAIL;
            $order->response_time = time();
            klicango_pay_order_save($order);
            $mess = _paybox_response_codes($_GET['error']);
            watchdog('klicango_pay', 'Payment has been refused with %code. %message', array('%code' => $_GET['error'], '%message' => $mess), WATCHDOG_WARNING);       
            break;
        case 'annule' :
            $order = klicango_pay_order_load($pid);
            $order->response_time = time();
            $order->status = PAYBOX_CANCEL;
            klicango_pay_order_save($order);
            break;
    }
    $query = array('paybox' => $result);
    drupal_goto($destination, $query);    
}

function _klicango_pay_process_pay(){
    global $user;
    if(!empty($_POST['ticket_type']) && !empty($_POST['quantity']) && $user->uid > 0){
        $result = db_query('SELECT * FROM {events_tickets} WHERE id = %d', (int)$_POST['ticket_type']);
        while ($row = db_fetch_object($result)){
            $ticket =  $row;
        }
        if(is_object($ticket)){
            klicango_pay_request($ticket->price, (int)$_POST['quantity'], $ticket->id, $user->uid, $_POST['event_nid']);
        }
    }
}

function klicango_pay_request($price, $quantity, $ticket_id, $customer_uid, $event_nid){
    
    $user = user_load($customer_uid);
    $cents = ((int)$price * 100 *(int)$quantity);
    $key =  variable_get('klicango_pay_PBX_HMAC_KEY');
    $sit = variable_get('klicango_pay_PBX_SITE');
    $rg = variable_get('klicango_pay_PBX_RANG');
    $id =  variable_get('klicango_pay_PBX_IDENTIFIANT');
    $url = variable_get('klicango_pay_transactions_url');
    $dateTime = date("c");       //We get back the date in format ISO-8601 
    
    if($cents > 0 && !empty($key) && !empty($sit) && !empty($rg) &&  !empty($id) && !empty($url) && is_object($user)){
        
        $order = new stdClass();
        $order->ticket_id =  $ticket_id;
        $order->customer_uid =  $customer_uid;
        $order->quantity =  $quantity;
        $order->cents =  $cents;
        $order->status = PAYBOX_INIT;
        $order->request_time = time();
        
        klicango_pay_order_save($order);
        
        $params = array(
            'PBX_SITE' => $sit,
            'PBX_RANG' => $rg,
            'PBX_IDENTIFIANT' => $id,
            'PBX_TOTAL' => $cents,
            'PBX_DEVISE' => '978',
            'PBX_CMD' => _paybox_get_ref_by_pid($event_nid, $ticket_id, $order->pid),
            'PBX_PORTEUR' => $user->mail,
            'PBX_RETOUR' => 'error:E;order:R;total:M;trans:T;auto:A;tarif:M;abonnement:B;pays:Y;sign:K',
            'PBX_HASH' => 'SHA512',
            'PBX_TIME' => $dateTime,
        );
        
        $destination = 'node/' . $event_nid;
        
        $params['PBX_EFFECTUE'] = url('paybox_back_page', array(
            'absolute' => TRUE,
            'query' => array(
                'destination' => $destination,
                'result' => 'effectue'
            )
        ));
        $params['PBX_REFUSE'] = url('paybox_back_page', array(
            'absolute' => TRUE,
            'query' => array(
                'destination' => $destination,
                'result' => 'refuse'
            )
        ));
        $params['PBX_ANNULE'] = url('paybox_back_page', array(
            'absolute' => TRUE,
            'query' => array(
                'destination' => $destination,
                'result' => 'annule'
            )
        ));
        
        $params['PBX_REPONDRE_A'] = url('paybox_process_auto', array(
            'absolute' => TRUE,
        ));
        
        //We create the string to be chopped without URLencodage
        $msg = '';
        foreach ($params as $param => $value){
            $msg .= "$param=$value&";
        }
        $msg = substr($msg, 0, -1);        
        $hmac = klicango_pay_generate_hmac($key, $msg);
        
        $query =  $params;
        $query['PBX_HMAC'] = $hmac; 
        
        drupal_goto($url, $query);
        
    }else{
         drupal_set_message(t('Some parameters have been lost.'), 'error');
    }
}

function _paybox_response_codes($code){
 switch ($code) {
    case '00000':
      return t('Operation successful.');

    case '00001':
      return t('Connexion to autorise center failed.');

    case drupal_substr($error, 0, 3) == '001':
      return t('Payment refused by autorisation center (error %error).', array('%error' => drupal_substr($error, 2)));

    case '00002':
      return t('An error in coherence has occurred.');

    case '00003':
      return t('Paybox error.');

    case '00004':
      return t('Owner number or cryptogram invalid.');

    case '00005':
      return t('Invalid question number .');

    case '00006':
      return t('Access refused or rank/site/is incorrect.');

    case '00007':
      return t('Invalid date.');

    case '00008':
      return t('Error on expiry date');

    case '00009':
      return t('Error creating subscription.');

    case '00010':
      return t('Unknow currency.');

    case '00011':
      return t('Wrong order total.');

    case '00012':
      return t('Invalid order reference.');

    case '00013':
      return t('This version is no longer upheld.');

    case '00014':
      return t('Incoherent frame received.');

    case '00015':
      return t('Error in access to previously referenced data.');

    case '00016':
      return t('User exist.');

    case '00018':
      return t('Transaction not found.');

    case '00020':
      return t('CVV not present.');

    case '00021':
      return t('Unauthorize card.');

    case '00024':
      return t('Error loading of the key.');

    case '00025':
      return t('Missing signature.');

    case '00026':
      return t('Missing key but the signature is present.');

    case '00027':
      return t('Error OpenSSL during the checking of the signature.');

    case '00028':
      return t('Unchecked signature.');

    case '00029':
      return t('Card non-compliant.');

    case '00030':
      return t('Timeout on checkout page (> 15 mn).');

    case '00031':
      return t('Reserved.');

    case '00097':
      return t('Timeout of connection ended.');

    case '00098':
      return t('Error of internal connection.');

    case '00099':
      return t('Incoherence between the question and the answer. Retry later.');

    default:
      return t('Unknown error.');
  }
}

/*
* Load payment object 
*/
function klicango_pay_order_load($order_id){
    $result = db_query('SELECT * FROM {events_payment} WHERE pid = %d', (int)$order_id);
    while ($row = db_fetch_object($result)){
        $order =  $row;
    }
    
    if(is_object($order)){
        return $order;
    }else{
        return false;
    }     
}

/*
* Save payment object 
*/
function klicango_pay_order_save(&$order){
    $is_new = empty($order->pid);
    
    if($is_new){
        $order->request_time = (!empty($order->request_time)) ? $order->request_time : time();
        //print_r ($order); die();
        drupal_write_record('events_payment', $order);
    }else{
        drupal_write_record('events_payment', $order, 'pid');
    }
}


/**
 * Check if signature of the Paybox server's response URL is correct.
 *
 * @return bool
 *   TRUE if signing is correct, FALSE otherwise.
 */
function klicango_pay_check_sign($query_string) {
  $matches = array();
  if (preg_match('/(?:q=.*?&)?(.*)&sign=(.*)$/', $query_string, $matches)) {
    $data = $matches[1];
    $sig = base64_decode(urldecode($matches[2]));

    $key_file = drupal_get_path('module', 'klicango_pay') . '/pubkey.pem';
    if ($key_file_content = file_get_contents($key_file)) {
      if ($key = openssl_pkey_get_public($key_file_content)) {
        return openssl_verify($data, $sig, $key);
      }
    }

    $log = 'Cannot read Paybox System public key file %file.';
    $log_vars = array('%file' => $key_file);
    watchdog('klicango_pay', $log, $log_vars, WATCHDOG_ERROR);
  }

  return FALSE;
}

/**
 * Page access callback for klicango_pay_offsite_auto.
 *
 * Checks if the client IP address is in the 'klicango_pay_paybox_servers'
 * variable.
 *
 * @return bool
 *   TRUE if client's IP is allowed, FALSE otherwise.
 */
function klicango_pay_is_paybox_server(){
    $paybox_servers = explode("\n", variable_get('klicango_pay_paybox_servers'));
    return in_array(ip_address(), $paybox_servers);    
}


/*
* IPN URL callback
* The main role  of this URL is to be called automatically (from server to server) 
* as soon as the payment is finished (either accepted or rejected).  
*/
function klicango_pay_offsite_auto(){
    $pid = _paybox_get_pid_by_ref($_GET['order']);
    if ($order = klicango_pay_order_load($pid)) {
        $order->response_time = time();
        if(klicango_pay_check_sign($_SERVER['QUERY_STRING'])) {
             // Save return message.
            $message = _paybox_response_codes($_GET['error']);

            // Check payment is accepted.
            if ($_GET['error'] === '00000') {
              $order->status = PAYBOX_SUCCESS;
              $event_id = db_result(db_query('SELECT et.event_id FROM events_tickets AS et INNER JOIN events_payment AS ep ON ep.ticket_id = et.id AND ep.pid =%d', $order->pid));
              events_change_event_user_set_accept_status($order->customer_uid, $event_id);
              
              //send email with ticket pdf
              $object = new stdClass();
              $object->event_id = $event_id;
              $object->ticket_type = $order->ticket_id;
              $object->ticket_number = $order->quantity;
              $object->ticket_price = $order->cents/100;
              $object->ticket_title = db_result(db_query('SELECT title FROM events_tickets WHERE id = %d AND event_id = %d', $order->ticket_id, $event_id));
              
              klicango_send_email('ticket_notification', $order->customer_uid, $object);
              
              // Log: failed to load the transaction.
              $log = 'Success. $_GET array: %get';
              $log_vars = array(
                      '%get' => '<pre>' . print_r($_GET, true) . '</pre>',
                    );
              watchdog('klicango_pay', $log, $log_vars, WATCHDOG_INFO);
            }
            else {
              // Log paybox signature errors.
              $log = 'Error %error: %msg';
              $log_vars = array(
                '%error' => $_GET['error'],
                '%msg' => $message,
              );
              watchdog('klicango_pay', $log, $log_vars, WATCHDOG_ERROR);
              // Invalidate the transaction.
              $order->status = PAYBOX_FAIL;
            }
        }else{
            // Log paybox signature errors.
            $log = 'Paybox System has failed to encrypt his own datas for payment %pid.';
            $log_vars = array(
              '%pid' => $order->pid,
            );
            watchdog('klicango_pay', $log, $log_vars, WATCHDOG_ERROR);
            // Invalidate the transaction.
            $order->status = PAYBOX_FAIL;         
        }
        klicango_pay_order_save($order);
    }
    else {
        // Log: failed to load the transaction.
        $log = 'Paybox module cannot load the transaction returned by the Paybox server. $_GET array: %get';
        $log_vars = array(
              '%get' => '<pre>' . print_r($_GET, true) . '</pre>',
            );
        watchdog('klicango_pay', $log, $log_vars, WATCHDOG_ERROR);
    }

    // Output an empty HTML page.
    return NULL;    
}


/*
 Paybox reference ID = WWWWWWXXXXXXYYYYYY 
 where WWWWWW = event ID, XXXXXX = ticket ID, YYYYYY = transaction ID. 
 For example 000042000032000721, where 42 is event ID, 32 ticket ID, 721 transaction ID    
 */  
function _paybox_get_ref_by_pid($event_id, $ticket_id, $payment_id){
    $W = str_pad($event_id, 7, '0', STR_PAD_LEFT); 
    $X = str_pad($ticket_id, 7, '0', STR_PAD_LEFT); 
    $Y = str_pad($payment_id, 7, '0', STR_PAD_LEFT);
    return $W . $X . $Y; 
  
}

function _paybox_get_pid_by_ref($PBX_CMD){
    $raw_pid = substr((string)$PBX_CMD, -7);
    $pid = (int)ltrim($raw_pid, '0');
    return $pid;    
}

