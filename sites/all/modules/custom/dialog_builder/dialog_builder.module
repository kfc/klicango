<?php
/**
 * @file
 * This module provides additional fields (description, picture, etc.) in user's profile
 *
 *
 * @author Eugene Zenko
 */


function dialog_builder_menu() {
  $items = array();
  
  $items['dialog/open'] = array(
    'title' => 'Dialog builder',
    'description' => 'Dialog builder callback.',
    'page callback' => 'dialog_builder_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['dialog/validate'] = array(
    'title' => 'Validate dialog',
    'description' => 'Validate dialog callback',
    'page callback' => 'dialog_builder_validate',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['user/signup'] = array(
    'title' => 'Signup user',
    'description' => 'Signup user callback',
    'page callback' => 'dialog_builder_signup_user',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['user/banking'] = array(
    'title' => 'Register banking details',
    'description' => 'Register banking details',
    'page callback' => 'dialog_builder_banking_details',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  return $items;
}

function dialog_builder_forms_list() {
    return array('professional_user_register', 'end_user_register', 'log_in', 'sign_up', 'professional_banking_details');
}

function dialog_builder_content() {
    if (isset($_GET['id']) && in_array($_GET['id'], dialog_builder_forms_list(), true)) {
        $data = dialog_builder_load_data($_GET['id']);
        echo theme($_GET['id'], $data);
        exit;
    }
}

function dialog_builder_load_data($dialog_id) {
    $data = array();
    switch ($dialog_id) {
        case 'end_user_register':
        case 'professional_user_register':
            $data = dialog_builder_user_data();
            break;
        case 'professional_banking_details':
            $data = dialog_builder_banking_data();
            break;
    }
    return $data;
}

function dialog_builder_validate() {
    
    if (isset($_POST['id']) && in_array($_POST['id'], dialog_builder_forms_list(), true) && function_exists('dialog_builder_' . $_POST['id'] . '_validate')) {
         $func = 'dialog_builder_' . $_POST['id'] . '_validate';
         call_user_func($func, $_POST);     
    } 
    exit;
}

function dialog_builder_log_in_validate($variables) {
    $result = db_query('SELECT uid FROM users WHERE name = "%s" AND pass = "%s"', @$variables['name'], md5(@$variables['pass']));
    if (!empty($result) && $uid = db_result($result)) {
        $account = user_authenticate(array('name' => $variables['name'], 'pass' => $variables['pass']));   
        drupal_json(array('success' => true, 'action' => 'redirect', 'value' => '/user'));
    } else {
        drupal_json(array('success' => false, 'message' => t('Incorrect login or password'), 'id' => array('name', 'pass')));
    }
    exit;    
}

function dialog_builder_professional_banking_details_validate($variables, $server_check = false) {
  drupal_json(array('success' => true, 'action' => 'submit'));
}

function dialog_builder_end_user_register_validate($variables, $server_check = false) {    
    if (user_is_logged_in()) {
        $required = array('name', 'surname', 'mail', 'birthday', 'country', 'city');
    } else {
        $required = array('name', 'surname', 'mail', 'pass', 'pass_confirm', 'birthday', 'country', 'city', 'conditions');
    }
    
    $errors = array();
    
    foreach($required as $field) {
        if (empty($variables[$field]) || $variables[$field] == '0') {
            $errors[$field] = 1;
        }
    }
    
    if (!(empty($variables['pass'])) && ($variables['pass'] !== $variables['pass_confirm'] || strlen($variables['pass']) < 6)) {
        $errors['pass'] = $errors['pass_confirm'] = 1;
    }
    
    if (!valid_email_address($variables['mail'])) {
        $errors['mail'] = 1;
    }

    //check birthday
    if (!empty($errors)) {
        if ($server_check) {
            return false;
        }
        drupal_json(array('success' => false, 'message' => t('Fields marked in red are missing or incorrect '), 'id' => array_keys($errors)));
    } else {
        
        $result = db_query('SELECT uid FROM users WHERE mail = "%s"', @$variables['mail']);
        if (!empty($result) && $uid = db_result($result)) {
            global $user;
            if (user_is_logged_in() && $uid == $user->uid) {
                //everything is ok
            } else {
                if ($server_check) {
                    return false;
                }
                drupal_json(array('success' => false, 'message' => t('User with such email already exists '), 'id' => array('mail')));
                exit;
            }
        }
        
        if ($server_check) {
            return true;
        }
        drupal_json(array('success' => true, 'action' => 'submit'));
    }
    exit;    
}

function dialog_builder_professional_user_register_validate($variables, $server_check = false) {    
    if (user_is_logged_in()) {
        $required = array('name', 'mail', 'address', 'zip', 'country', 'city', 'phone');
    } else {
        $required = array('name', 'mail', 'pass', 'pass_confirm', 'address', 'zip', 'country', 'city', 'phone', 'conditions');
    }
    
    $errors = array();
    foreach($required as $field) {
        if (empty($variables[$field]) || $variables[$field] == '0') {
            $errors[$field] = 1;
        }
    }
    
    if (!empty($variables['pass']) && ($variables['pass'] !== $variables['pass_confirm'] || strlen($variables['pass']) < 6)) {
        $errors['pass'] = $errors['pass_confirm'] = 1;
    }
    
    if (!valid_email_address($variables['mail'])) {
        $errors['mail'] = 1;
    }
    
    if (!empty($variables['siret']) && strlen($variables['siret']) != 14) {
        $errors['siret'] = 1;
    }
    
    if ($variables['category'] == '0' && empty($variables['category_other'])) {
        $errors['category'] = $errors['category_other'] = 1;
    }
    
    //check birthday
    if (!empty($errors)) {
        if ($server_check) {
            return false;
        }
        drupal_json(array('success' => false, 'message' => t('Fields marked in red are missing or incorrect '), 'id' => array_keys($errors)));
    } else {
        
        $result = db_query('SELECT uid FROM users WHERE mail = "%s"', @$variables['mail']);
        if (!empty($result) && $uid = db_result($result)) {
            global $user;
            if (user_is_logged_in() && $uid == $user->uid) {
                //everything is ok
            } else {
                if ($server_check) {
                    return false;
                }
                drupal_json(array('success' => false, 'message' => t('User with such email already exists '), 'id' => array('mail')));
                exit;
            }
        }
        
        if ($server_check) {
            return true;
        }
        drupal_json(array('success' => true, 'action' => 'submit'));
    }
    exit;
}

function dialog_builder_signup_user() {
    $variables = $_POST;
    if ($variables['user_type'] == '6') {
        $check = dialog_builder_end_user_register_validate($variables, true);
    } else {
        $check = dialog_builder_professional_user_register_validate($variables, true);
    }
    
    if (!$check || !in_array($variables['user_type'], array('6', '7'), true)) {
        die(t('Incorrect data'));
    }
    
    
        
    $variables['first_name'] = $variables['name'];
    
    if (user_is_logged_in()) {
        global $user;
        $userinfo = array(
          'name' => $variables['mail'],
          'init' => $variables['mail'],
          'mail' => $variables['mail'],
        );
        
        if (!empty($variables['pass'])) {
            $userinfo['pass'] = $variables['pass'];
        }
        
        $account = user_save($user, $userinfo);
    } else {
        $userinfo = array(
          'name' => $variables['mail'],
          'init' => $variables['mail'],
          'mail' => $variables['mail'],
          'pass' => $variables['pass'],
          'roles' => array(
            DRUPAL_AUTHENTICATED_RID => 'authenticated user',
            $variables['user_type'] => ($variables['user_type'] == '6') ? 'individual' : 'professional',
          ),
          'status' => 1
        );
    
        $account = user_save('', $userinfo);
    }  
    
    db_query('UPDATE users SET full_name = "%s" WHERE uid = %d', $variables['first_name'] . ' ' . $variables['surname'], $account->uid);
            
    //save photo
    dialog_builder_save_profile_photo($account, $variables);
    dialog_builder_delete_profile_photo($account, $variables);
           
    dialog_builder_save_user($account, $variables);
           
    if (!user_is_logged_in()) {
        $user = user_authenticate(array('name' => $variables['mail'], 'pass' => $variables['pass']));
    }
    drupal_goto('<front>');
}          
           
function dialog_builder_save_user(&$account, $variables) {
    global $user;
    if ($variables['user_type'] == 6) {
        $fields = array('first_name', 'surname', 'sex', 'birthday', 'country', 'city', 'university', 'degree');
    } else {
        $variables['category'] = (!empty($variables['category'])) ? $variables['category'] : $variables['category_other'];
        $fields = array('first_name', 'address', 'zip', 'country', 'city', 'phone', 'siret', 'category');
    }
    
    $db_fields = array();
    $result = db_query('SELECT fid, name FROM profile_fields WHERE name IN ("' . implode('", "', $fields) . '")');
    while ($row = db_fetch_array($result)) {
        $db_fields[$row['name']] = $row['fid'];
    }
    db_query('DELETE FROM profile_values WHERE uid = %d', $account->uid);
    
    if(user_is_logged_in()) {
      $data = unserialize($user->data);
    }
    
    foreach ($db_fields as $field => $fid) {
        $result = db_query('INSERT INTO profile_values (fid, uid, value) VALUES (%d, %d, "%s")', $fid, $account->uid, $variables[$field]);
        $account->$field = $variables[$field];
        if (user_is_logged_in()) {
          $user->$field = $variables[$field];
          if (!empty($data) && !empty($data[$field])) {
            $data[$field] = $variables[$field];
          }
        }
    }
    
    if(!empty($data)) {
      $user = user_save($user, $data);
    }
    
}

function dialog_builder_delete_profile_photo($account, $variables) {
    foreach ($variables['delete'] as $photo) {
        db_query('DELETE FROM advanced_profile WHERE user_id = %d AND photo = "%s"', $account->uid, $photo);
    }
}

function dialog_builder_save_profile_photo($account, $variables) {
    $result = db_query('SELECT COUNT(user_id) as user_exists FROM {advanced_profile} WHERE user_id = %d', $account->uid);
    $account_exists = db_result($result);
    $file = file_save_upload('files-banner', array('file_validate_is_image' => array()));
    
    if ($file = file_save_upload('files-banner', array('file_validate_is_image' => array()))) {
        $path = variable_get('advanced_profile_photo_path', 'sites/default/files');
        if (!$path) {
          drupal_set_message('Photo wasn\t saved: file storage location is not set (see admin/settings/advanced_profile).', 'warning');
        } else {
          $parts = pathinfo($file->filename);

          $filename = rtrim($path, '/') . '/' . $account->uid . '-'. time() . '.' . $parts['extension'];
          
          if (!file_copy( $file, $filename, FILE_EXISTS_REPLACE)) {
            $filename = '';
          }
        }
          $sql = "INSERT INTO {advanced_profile} (user_id, fullname, bio, photo) VALUES (%d, '%s', '%s', '%s')";
          db_query($sql, array($account->uid, '', '', $filename));
    }
    
    if ($file = file_save_upload('files-photo', array('file_validate_is_image' => array()))) {
        $path = 'sites/default/files/pictures';
        if (!$path) {
          drupal_set_message('Photo wasn\t saved: file storage location is not set (see admin/settings/advanced_profile).', 'warning');
        } else {
          $parts = pathinfo($file->filename);
        
          $filename = rtrim($path, '/') . '/picture-' . $account->uid . '.' . $parts['extension'];
          if (!file_copy( $file, $filename, FILE_EXISTS_REPLACE)) {
            $filename = '';
          }
        }
          $sql = "UPDATE {users} SET picture = '%s' WHERE uid = %d";
          db_query($sql, array($filename, $account->uid));
    }
}

function dialog_builder_theme(){
    return array(
        'professional_user_register' => array(
        	'arguments' => array(
        		'data' => NULL,
        	),
        	'template' => 'theme/professional_user_register',
        ),
        'professional_banking_details' => array(
        	'arguments' => array(
        		'data' => NULL,
        	),
        	'template' => 'theme/professional_banking_details',
        ),
        'end_user_register' => array(
        	'arguments' => array(
        		'data' => NULL,
        	),
        	'template' => 'theme/end_user_register',
        ),
        'log_in' => array(
        	'arguments' => array(
        		'data' => NULL,
        	),
        	'template' => 'theme/log_in',
        ),
        'sign_up' => array(
        	'arguments' => array(
        		'data' => NULL,
        	),
        	'template' => 'theme/sign_up',
        ),
    );
}

function dialog_builder_user_data() {
    if (!user_is_logged_in()) {
        return array();
    }
    
    global $user;
    profile_load_profile($user);
    $user->banners = advanced_profile_load($user->uid);
    return $user;
}

function dialog_builder_banking_details() {
  if(user_is_logged_in()) {
    global $user;
    db_query('DELETE FROM users_banking WHERE uid = %d', $user->uid);
    db_query('INSERT INTO users_banking VALUES (%d, "%s", "%s", "%s", "%s", "%s")', $user->uid, @$_POST['country'], @$_POST['owner'], @$_POST['agency'], @$_POST['iban'], @$_POST['bic']);
  }
  drupal_goto('<front>');
}

function dialog_builder_banking_data($uid = null) {
  if(empty($uid)) {
    global $user;
    $uid = $user->uid;
  }
  
  $result = db_query('SELECT * FROM users_banking WHERE uid = %d', $uid);
  if ($result) {
    return db_fetch_array($result);
  } else {
    return array();
  }
}