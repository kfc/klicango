<?php

function events_menu(){
  $items = array(
    'create_event_if_valid' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'create_event_if_valid',
      'access callback' => 'user_is_logged_in'
    ),
    
    'check_event_fields' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'check_event_fields',
      'access callback' => 'user_is_logged_in'
    ),
    
    'check_event_form_values' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'check_event_form_values',
      'access callback' => 'user_is_logged_in'
    ),
    
  );
  return $items;
  
}

function events_block($op = 'list', $delta = 0, $edit = array()) {
    if ($op == 'list') {
        $blocks[0] = array(
            'title' => t('Event Photos Right'),
            'info' => t('Event Photos Right'),
            'weight' => 0,
        );
        return $blocks;
    } else if ($op == 'view') {
        switch ($delta) {
          case 0:
            // Your module will need to define this function to render the block.
            $block = array(
              'content' => events_get_events_photos(),
            );
            break; 
        }
        return $block;
    }
}



function events_theme() {
    return array(
      'create_event_form' => array(
        'template' => 'create-event',
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'event_photos_list' => array(
        'template' => 'event-photos-list',
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
    );
}

function events_form_alter(&$form, &$form_state, $form_id) {
   
}


function events_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  
}

function check_event_fields($values, &$errors){
  $is_valid = true;
  if(!isset($values['title']) || empty($values['title'])){
    $errors['title'] = t('Enter event title'); 
    $is_valid = false;
  }
  
  if(!isset($values['details']) || empty($values['details'])){
    $errors['details'] = t('Enter event details'); 
    $is_valid = false;
  }
  
  if(!isset($values['location']) || empty($values['location'])){
    $errors['location'] = t('Enter event location'); 
    $is_valid = false;
  }
  
  if(!isset($values['date']) || empty($values['date'])){
    $errors['date'] = t('Enter event date'); 
    $is_valid = false;
  }
  
  if(isset($values['date']) && !empty($values['date']) && strtotime($values['date']) == -1){
    $errors['date'] = t('Enter valid date'); 
    $is_valid = false;
  }
  if(isset($values['date']) && !empty($values['date'])){
    if(!preg_match('/^([1-9]|0[1-9]|[12][0-9]|3[01])\/([1-9]|0[1-9]|1[012])\/(2)\d\d\d$/',$values['date'])){
      $errors['date'] = t('Date format: d/m/Y'); 
      $is_valid = false;
    }
  }
  
  if(!isset($values['time']) || empty($values['time'])){
    $errors['time'] = t('Enter event time'); 
    $is_valid = false;
  }
  
  if(isset($values['time']) && !empty($values['time'])){
    if(!preg_match('/^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))(\s*-\s*(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9])))?$/',$values['time'])){
      $errors['time'] = t('Enter valid time'); 
      $is_valid = false;
    }
  }
  
  
  if(isset($values['email']) && !empty($values['email']) && !valid_email_address($values['email'])){
    $errors['email'] = t('Enter valid e-mail address'); 
    $is_valid = false;
  }
  
  return $is_valid;
}

function check_event_form_values(){
  if(isset($_POST)){
    $errors = $return = array();
    $is_valid = check_event_fields($_POST, $errors);  
    if(!$is_valid){
      $return = array('isValid' => false, 'errors'=>$errors);
    }
    else 
    $return = array('isValid' => true);  
  }
  else $return = array('success' => false);
  
  echo json_encode($return);
  exit;
}

function create_event_if_valid(){
  
  if(isset($_POST)){
    $errors = $return = array();
    $is_valid = check_event_fields($_POST, $errors);
    if(!$is_valid){
      
    } else{
      
      global $user;   
      $event = new stdClass();
      $event->type = 'event';
      $event->uid = $user->uid;
      $event->status = 1;
      $event->title = trim(check_plain($_POST['title']));
      $event->field_event_details[0]['value']= trim(check_plain($_POST['details']));
      $event->field_location[0]['value']= trim(check_plain($_POST['location']));
      $date_arr = explode('/',trim($_POST['date']));
      $time = $_POST['time']; 
      if(strpos($time,'-') !== false)
        $time = trim(substr($_POST['time'],0,strpos($_POST['time'],'-')));
      $time = explode(':',$time);  
      $event->field_date[0]['value']= $event->field_date[0]['value2']= date('c', mktime($time[0],$time[1],0,$date_arr[1],$date_arr[0],$date_arr[2]));
      $event->field_event_email[0]['value']= check_plain($_POST['email']);
      $event->field_event_contact_phone[0]['value']= check_plain($_POST['phone']);
      if(in_array('professional', $user->roles)){
         $event->field_event_gratuity[0]['value']= check_plain($_POST['gratuity']);  
        
      }
      $event->field_event_type[0]['value']= (in_array('individual', $user->roles) ? 'private' : 'public');
      if ($file = file_save_upload('photo')) {
        $event->field_content_images[0] = (array)$file;  
      }
      
      node_save($event);
      if($event->nid > 0)
        drupal_goto('node/'.$event->nid);
      else drupal_goto('<front>');  
      //die();
    }
  }
  //dpm($user);
 // dpm($_POST);
 // dpm($_FILES);
  return '';
}

function events_get_events_photos(){
  return theme('event_photos_list');
  
  
}

