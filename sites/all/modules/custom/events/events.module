<?php

define('EVENT_STATUS_UNDEFINED', '');
define('EVENT_STATUS_NEW', 1);
define('EVENT_STATUS_PENDING', 2);
define('EVENT_STATUS_ACCEPTED', 3);
define('EVENT_STATUS_DECLINED', 4);

function events_menu(){
  $items = array(
    'create_event_if_valid' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'create_event_if_valid',
      'access callback' => 'user_is_logged_in'
    ),
    
    'check_event_fields' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'check_event_fields',
      'access callback' => 'user_is_logged_in'
    ),
    
    'check_event_form_values' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'check_event_form_values',
      'access callback' => 'user_is_logged_in'
    ),
    
    'event_post_comment' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'event_post_comment',
      'access callback' => 'user_is_logged_in'
    ),
    
    'add_event_for_user' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'add_event_for_user',
      'access callback' => 'user_is_logged_in'
    ),
    'invitation/decline' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'event_decline_event_invitation',
      'access callback' => 'user_is_logged_in'
    ),
    'invitation/accept' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'event_accept_event_invitation',
      'access callback' => 'user_is_logged_in'
    ),
    'event/users' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_users',
      'access callback' => true
    ),
    'events/find' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_find',
      'access callback' => true
    ),
    'remove_event_for_user' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'remove_event_for_user',
      'access callback' => 'user_is_logged_in'
    ),
    
    'public' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_public_page',
      'access callback' => true
    ),
    'private' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_private_page',
      'access callback' => 'user_is_logged_in'
    ),
    
    'show_events/%/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'show_events',
      'page arguments' => array(1,2),
      'access callback' => 'user_is_logged_in'
    ),
    
     'get_event_form_data/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_get_event_form_data',
      'page arguments' => array(1),
      'access callback' => 'user_is_logged_in'
    ),
    
    'user_calendar/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_user_calendar',
      'page arguments' => array(1),
      'access callback' => true
    ),
    'user_calendar/%/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_user_calendar',
      'page arguments' => array(1,2),
      'access callback' => true
    ),
    
     'print_coupon/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'events_print_coupon',
      'page arguments' => array(1),
      'access callback' => true
    ),
    
  );
  return $items;
  
}

function events_block($op = 'list', $delta = 0, $edit = array()) {
    if ($op == 'list') {
        $blocks[0] = array(
            'title' => t('Event Photos Right'),
            'info' => t('Event Photos Right'),
            'weight' => 0,
        );
        
        $blocks[1] = array(
            'title' => t('Events Activity Stream'),
            'info' => t('Events Activity Stream'),
            'weight' => 0,
        );
        
        $blocks[2] = array(
            'title' => t('Latest Events Photos'),
            'info' => t('Latest Events Photos'),
        );
        
        return $blocks;
    } else if ($op == 'view') {
        switch ($delta) {
          case 0:
            $block = array(
              'content' => events_get_events_photos(),
            );
            break; 
            
          case 1:
            $block = array(
              'content' => events_get_user_activity_stream(),
            );
            break;
          
           case 2:
            $block = array(
              'content' => events_get_latest_events_photos(),
            );
            break;     
            
        }
        return $block;
    }
}



function events_theme() {
    return array(
      'create_event_form' => array(
        'template' => 'create-event',
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'event_photos_list' => array(
        'template' => 'event-photos-list',
        'arguments' => array('content' => NULL, 'photos_count' => NULL, 'all_photos_link' => NULL, 'more_photos_link' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'events_invited_list' => array(
        'template' => 'events-invited-list',
        'arguments' => array('events' => NULL, 'public' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),    
      'events_accepted_list' => array(
        'template' => 'events-accepted-list',
        'arguments' => array('events' => NULL, 'public' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'events_find_events' => array(
        'template' => 'events-find-events',
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'events_local_users' => array(
        'template' => 'events-local-users',
        'arguments' => array('users' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'events_facebook_users' => array(
        'template' => 'events-facebook-users',
        'arguments' => array('users' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'event_post_box' => array(
        'template' =>'event-post-box',
        'path' => drupal_get_path('theme',variable_get('theme_default','')),
      ),
      
      'latest_events_photos' => array(
        'template' =>'latest-events-photos',
        'path' => drupal_get_path('theme',variable_get('theme_default','')),
        'arguments' => array('photos' => NULL, 'photos_count' => NULL)
      ),
      
      'friend_request_calendar_page' => array(
        'template' =>'friend-request-calendar-page',
        'path' => drupal_get_path('theme',variable_get('theme_default','')), 
        'arguments' => array('viewed_user' => NULL) 
      ),
      
      'event_access_denied' => array(
        'template' =>'event-access-denied',
        'path' => drupal_get_path('theme',variable_get('theme_default','')), 
      ),
      
      'date_events_list' => array(
        'template' => 'date-events-list',
        'arguments' => array('events' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'find_events_list' => array(
        'template' => 'find-events-list',
        'arguments' => array('events' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      
      'event_for_day' => array(
        'template' => 'event-for-day',
        'arguments' => array('event' => NULL, 'viewed_user_id' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      
      
      
      
    );
}

function events_form_alter(&$form, &$form_state, $form_id) {
   
}


function events_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'view':
      if($node->type == 'event'){    
        $view = views_get_view('nodecomments',true);
        $view->set_display('nodecomment_comments_1');
        $view->set_use_pager(true);
        $view->set_items_per_page(10);
        $args = array($node->nid);
        $view->set_arguments($args);
        $view->pre_execute();
        $node->comments_form = theme('event_post_box');
        $node->comments_view = $view->render('nodecomment_comments_1');
        $node->current_user_status = events_get_event_status_for_user($node->nid, $user->uid);
        $node->people_going = events_get_event_attenders($node->nid);
        
      }
      if($node->type == 'comment'){
        global $user;
        if($node->uid != $user->uid){
          $node->user_info = user_load($node->uid);
          $node->comment_target_node = node_load($node->comment_target_nid);
        }
        else{
          $node->user_info = $user;
        }
      }
      break;  
  }
}

function check_event_fields($values, &$errors){
  $is_valid = true;
  if(!isset($values['title']) || empty($values['title'])){
    $errors['title'] = t('Enter event title'); 
    $is_valid = false;
  }
  
  if(!isset($values['details']) || empty($values['details'])){
    $errors['details'] = t('Enter event details'); 
    $is_valid = false;
  }
  
  if(!isset($values['location']) || empty($values['location'])){
    $errors['location'] = t('Enter event location'); 
    $is_valid = false;
  }
  
  if(!isset($values['date']) || empty($values['date'])){
    $errors['date'] = t('Enter event date'); 
    $is_valid = false;
  }
  
  if(isset($values['date']) && !empty($values['date']) && strtotime($values['date']) == -1){
    $errors['date'] = t('Enter valid date'); 
    $is_valid = false;
  }
  if(isset($values['date']) && !empty($values['date'])){
    if(!preg_match('/^([1-9]|0[1-9]|[12][0-9]|3[01])\/([1-9]|0[1-9]|1[012])\/(2)\d\d\d$/',$values['date'])){
      $errors['date'] = t('Date format: d/m/Y'); 
      $is_valid = false;
    }
  }
  
  if(!isset($values['time']) || empty($values['time'])){
    $errors['time'] = t('Enter event time'); 
    $is_valid = false;
  }
  
  if(isset($values['time']) && !empty($values['time'])){
    if(!preg_match('/^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))(\s*-\s*(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9])))?$/',$values['time'])){
      $errors['time'] = t('Enter valid time'); 
      $is_valid = false;
    }
  }
  
  
  if(isset($values['email']) && !empty($values['email']) && !valid_email_address($values['email'])){
    $errors['email'] = t('Enter valid e-mail address'); 
    $is_valid = false;
  }
  
  return $is_valid;
}

function check_event_form_values(){
  if(isset($_POST)){
    $errors = $return = array();
    $is_valid = check_event_fields($_POST, $errors);  
    if(!$is_valid){
      $return = array('isValid' => false, 'errors'=>$errors);
    }
    else 
    $return = array('isValid' => true);  
  }
  else $return = array('success' => false);
  
  echo json_encode($return);
  exit;
}

function create_event_if_valid(){
  
  if(isset($_POST)){
    $errors = $return = array();
    $is_valid = check_event_fields($_POST, $errors);
    if(!$is_valid){
      
    } else{
       $edit_mode = false;
      global $user; 
      
      if(isset($_POST['nid']) && !empty($_POST['nid']) && (int)$_POST['nid'] > 0){
        $edit_mode = true;
        $event = node_load($_POST['nid']);
        if($event->uid == $user->uid){
        }
        else return false;
        
      }
      else{
        $event = new stdClass();
        $event->type = 'event';
        $event->uid = $user->uid;
        $event->status = 1;
      }
      $event->title = trim($_POST['title']);
      $event->field_event_details[0]['value']= trim($_POST['details']);
      $event->field_location[0]['value']= trim($_POST['location']);
      $date_arr = explode('/',trim($_POST['date']));
      $time = $_POST['time']; 
      if(strpos($time,'-') !== false)
        $time = trim(substr($_POST['time'],0,strpos($_POST['time'],'-')));
      $time = explode(':',$time);  
      $event->field_date[0]['value']= $event->field_date[0]['value2']= date('c', mktime($time[0],$time[1],0,$date_arr[1],$date_arr[0],$date_arr[2]));
      $event->field_event_email[0]['value']= $_POST['email'];
      $event->field_event_contact_phone[0]['value']= $_POST['phone'];
      if(in_array('professional', $user->roles)){
         $event->field_event_gratuity[0]['value']= $_POST['gratuity'];  
        
      }
      $event->field_event_type[0]['value']= (in_array('individual', $user->roles) ? 'private' : 'public');
      if ($file = file_save_upload('photo')) {
        $event->field_content_images[0] = (array)$file;  
      }
      
      node_save($event);
      if(!$edit_mode){
        if(!empty($event->nid)){
          $data = array('event_id' => $event->nid, 'sender_id' => $user->uid, 'user_id' => $user->uid, 'status' => EVENT_STATUS_ACCEPTED);
          $res = drupal_write_record('events_users', $data);
        }
        
        // Create specal comment 'Event created'
        global $user;   
        $comment = new stdClass();
        $comment->type = 'comment';
        $comment->title = '<EventCreated>';
        $comment->uid = $user->uid;
        $comment->name = $user->name;
        $comment->status = 1;
        $comment->body = trim($_POST['comment_body']);
        node_save($comment);

        if($comment->nid > 0){
          $comment->comment_target_nid = $event->nid; 
           nodecomment_save($comment);
        }      
        
        $query = '';
        if (!empty($_POST['invite'])) {
          $invite_str = implode(',', $_POST['invite']);
          $query = 'invite=' . $invite_str . '&event_id=' . $event->nid;
        }
      }
      
      // Send invitations to all followers of a place
      if(!$edit_mode && in_array('professional', $user->roles)){
        
        //TEMPORARY Send invitation to all users
          db_query("INSERT INTO events_users(user_id, event_id, sender_id,status) 
                    SELECT DISTINCT(uid),".$event->nid.",".$user->uid.",1 from (SELECT uid from {users_roles} where rid = (SELECT rid FROM role WHERE name = 'individual' )) t");
        
         /*$followers = klicango_friends_all_friends($user->uid);
         if(!empty($followers)){                                 
           db_query("INSERT INTO events_users(user_id, event_id, sender_id,status) 
                    SELECT DISTINCT(uid),".$event->nid.",".$user->uid.",1 from (SELECT uid FROM friends WHERE (fid = ".$user->uid.") UNION SELECT fid as uid FROM friends WHERE (uid = ".$user->uid.")) t ");
         } */
      }
      if($event->nid > 0)
        drupal_goto('node/'.$event->nid, $query);
      else drupal_goto('<front>');  
    }
  }
  return '';
}

function events_get_events_photos(){
  $photos_to_display = 7;
  $res = db_query("SELECT field_comment_photo_fid, f.*
                      FROM content_field_comment_photo ph
                      INNER JOIN node comment_nid on comment_nid.nid = ph.nid
                      INNER JOIN node_comments nc on nc.cid = comment_nid.nid
                      INNER JOIN files f on f.fid = field_comment_photo_fid
                      WHERE nc.nid = %d AND field_comment_photo_fid IS NOT NULL
                      ORDER BY comment_nid.created DESC, f.fid DESC
                      LIMIT %d
                      ",arg(1),$photos_to_display + 1 );  // Take 1 more picture to show when 'more...' link is clicked.
  while ($r = db_fetch_array($res)) {
    $photos[] = $r;
  }
  
  $count_res = db_query("SELECT count(field_comment_photo_fid) as photos_count
                      FROM content_field_comment_photo ph
                      INNER JOIN node comment_nid on comment_nid.nid = ph.nid
                      INNER JOIN node_comments nc on nc.cid = comment_nid.nid
                      WHERE nc.nid = %d AND field_comment_photo_fid IS NOT NULL
                      ",arg(1));                      
  
  $count = db_fetch_array($count_res);
  $count = $count['photos_count'];
  
  $all_photos_link = '/event_photo/'.arg(1).'/'.$photos[0]['fid'];
  $more_photos_link  = '';
  if($count > $photos_to_display){
    $more_photos_link = '/event_photo/'.arg(1).'/'.$photos[$photos_to_display]['fid'];
    unset($photos[count($photos) -1]);
  }
                     
  $photos_html = '';
  foreach($photos as $_photo){           
    $photos_html .= '<div class="item"><a class="klicango-popup" href="/event_photo/'.arg(1).'/'.$_photo['fid'].'">'.theme_imagecache('comment_image_right_thumbnail',$_photo['filepath']).'</a></div>';
  }
  
  //$view = views_get_view('event_photos');
  //$view->set_display('block_1');
  //$view->set_arguments(array(arg(1)));
  return theme('event_photos_list',$photos_html, $count, $all_photos_link, $more_photos_link);//$view->render('block_1');
}

function event_post_comment(){
  if(isset($_POST) && isset($_POST['comment_target_nid']) && ($_POST['comment_target_nid'] > 0) && (isset($_POST['comment_body']) || isset($_FILES['files']['photo']))){
    
    global $user;   
    $comment = new stdClass();
    $comment->type = 'comment';
    $comment->title = 'Comment "'.substr($_POST['comment_body'],0, 20).'..." from '.$user->name.' for node '.$_POST['comment_target_nid'];
    $comment->uid = $user->uid;
    $comment->name = $user->name;
    $comment->status = 1;
    $comment->body = trim($_POST['comment_body']);
    if(!empty($_FILES['files'])){
      $_index = 0;
      foreach($_FILES['files']['name'] as $_name => $_ph){
        if ($file = file_save_upload($_name)) {
          $comment->field_comment_photo[$_index++] = (array)$file;      
        }
      }
    }
    
    /*echo '<pre>';
    print_r($_FILES);
    print_r($comment);
    die();*/
    
    node_save($comment);
    if($comment->nid > 0){
      $comment->comment_target_nid = (int)$_POST['comment_target_nid']; 
       nodecomment_save($comment);
    }
    drupal_goto('node/'.$_POST['comment_target_nid']);
  }
  
}


function events_get_user_events_with_status($user_id = null, $status = EVENT_STATUS_ACCEPTED){
  $events = array();
  if(empty($user_id)){
    global $user;
    $user_id = $user->uid;
  }  
    
  $res = db_query('SELECT * from {events_users} where user_id = %d AND status = %d',$user_id, $status);
  while ($r = db_fetch_array($res)) {
    $events[$r['event_id']] = $r['event_id'];
  }

  return $events;
}

function events_get_events_created_by_user($user_id = null, $load_full_node = false){
  $events = array();
  if(empty($user_id)){
    global $user;
    $user_id = $user->uid;
  }  
  $res = db_query('SELECT * from {node} where uid = %d AND type=\'event\' AND status = 1',$user_id);
  while ($r = db_fetch_array($res)) {
    if($load_full_node)
      $events[$r['nid']] = $r['nid'];
    else
      $events[$r['nid']] = $r['nid'];
  }
  return $events;
}

function events_get_event_status_for_user($event_id = null, $user_id = null){
  $status = '';                       
  if(empty($user_id)){
    global $user;
    $user_id = $user->uid;
  }       
  if(!empty($event_id) && !empty($user_id)){   
    $res = db_query('SELECT status from {events_users} where user_id = %d AND event_id = %d',$user_id, $event_id); 
    $status = db_fetch_array($res);
    $status = $status['status'];
  }
  return $status;
}

function events_event_is_available_to_add($node){
  global $user;
  if(!isset($node->uid)){
    if(isset($node->users_uid)){
      $node->uid = $node->users_uid;
    }
    else{
      $_node = node_load($node->nid);
      $node->uid = $_node->uid;
    }
  }
    
  return (user_is_logged_in() && in_array('individual', $user->roles) && ($user->uid != $node->uid) && events_get_event_status_for_user($node->nid, $user->uid) != EVENT_STATUS_ACCEPTED);
}

function events_event_is_invited($node){
  global $user;
  if(!isset($node->uid)){
    if(isset($node->users_uid)){
      $node->uid = $node->users_uid;
    }
    else{
      $_node = node_load($node->nid);
      $node->uid = $_node->uid;
    }
  }
    
  return (user_is_logged_in() && in_array('individual', $user->roles) && ($user->uid != $node->uid) && events_get_event_status_for_user($node->nid, $user->uid) == EVENT_STATUS_NEW);
}

function add_event_for_user(){
  $res = false;
  if(isset($_POST) && isset($_POST['event_id'])){
    global $user;
    $event_id = (int)$_POST['event_id'];
    $event_node = node_load($event_id);
    if(events_event_is_available_to_add($event_node)){
      $data = array('event_id' => $event_id, 'sender_id' => $user->uid, 'user_id' => $user->uid, 'status' => EVENT_STATUS_ACCEPTED);
      if(events_get_event_status_for_user($event_id, $user->uid) != EVENT_STATUS_UNDEFINED)
        $res = drupal_write_record('events_users', $data, array('event_id', 'user_id'));  
      else
        $res = drupal_write_record('events_users', $data);    
    }
  }
  $output = array('success' => $res);
 
    
  echo json_encode($output);
  exit;
}

function remove_event_for_user(){
  $res = false;
  if(isset($_POST) && isset($_POST['event_id'])){
    global $user;
    $event_id = (int)$_POST['event_id'];
    //$event_node = node_load($event_id);
    $data = array('event_id' => $event_id, 'sender_id' => $user->uid, 'user_id' => $user->uid, 'status' => EVENT_STATUS_DECLINED);
    $res = drupal_write_record('events_users', $data, array('event_id', 'user_id'));  
  }
  $output = array('success' => $res, 'ee' => $data);
    
  echo json_encode($output);
  exit;
}

function events_preprocess_page(&$variables) {    
    $variables['menu_stats']['public_pending'] = events_get_count(EVENT_STATUS_NEW, true);
    $variables['menu_stats']['private_pending'] = events_get_count(EVENT_STATUS_NEW, false);
        
    global $user;
    if(arg(0) == 'user' && arg(1) > 1 && !in_array('site admin',$user->roles)){
      $viewed_uid = arg(1);
      if($viewed_uid != $user->uid){ //check if a place or friends
        $viewed_user = user_load($viewed_uid);
        if((in_array('individual', $viewed_user->roles))){ // Private profile
          if(!klicango_friends_are_friends($user->uid, $viewed_uid)  || !user_is_logged_in()) {
            $variables['content'] = theme('friend_request_calendar_page',$viewed_user);
            unset($variables['content_bottom_left']);
            unset($variables['content_bottom_right']);
            unset($variables['right_aside']);
          }
        }
      }  
    }
    
    if(isset($variables['node']) && $variables['node']->type == 'event'){
      $viewed_event_id = $variables['node']->nid;
      $status = events_get_event_status_for_user($viewed_event_id);   
      if(strtolower($variables['node']->field_event_type[0]['value']) == 'private' && (empty($status) || !user_is_logged_in())){
        $variables['content'] = theme('event_access_denied');
        unset($variables['content_bottom_left']);
        unset($variables['content_bottom_right']);
        unset($variables['right_aside']);  
      }
    }
    
    /*if(user_is_anonymous()){ 
      drupal_add_js("
      
        $(document).ready(function(){
          $('div.person-name>a:not(.publicContent)').addClass('protectedContent');
        })
      
      ",'inline');
    } */
    
}

function events_get_count($status, $is_public = true) {
    global $user;
    if ($is_public) {
        $type = 'public';
    } else {
        $type = 'private';
    }
    $result = db_query('SELECT COUNT(*) AS num FROM events_users AS eu 
                        LEFT JOIN content_type_event AS ev ON eu.event_id = ev.nid 
                        WHERE ev.field_event_type_value = "%s" AND eu.status = %d AND eu.user_id = %d 
                        AND (ev.field_date_value > NOW() OR ev.field_date_value2 > NOW())', $type, $status, $user->uid);
    $count = db_result($result);
    
    return $count;
}

function events_get_events($status, $is_public = true) {
    global $user;
    if ($is_public) {
        $type = 'public';
    } else {
        $type = 'private';
    }
    $result = db_query('SELECT eu.* FROM events_users AS eu 
                        LEFT JOIN content_type_event AS ev ON eu.event_id = ev.nid 
                        WHERE ev.field_event_type_value = "%s" AND eu.status = %d AND eu.user_id = %d 
                        AND (ev.field_date_value > NOW() OR ev.field_date_value2 > NOW())', $type, $status, $user->uid);
    
    $ids = array();
    while($event = db_fetch_array($result)) {
        $ids[] = $event;    
    }
    
    return $ids;
}
function events_views_pre_render(&$view) {
  if($view->name == 'homepage_public_events' && $view->current_display == 'block_2'){
    $items_to_display = 9;
    if($view->result > $items_to_display){
      $new_result = array();
      $result_keys = array_keys($view->result);
      shuffle($result_keys);
      if($items_to_display < count($result_keys))
        $random_keys = array_slice($result_keys, 0, $items_to_display);
      else
        $random_keys = $result_keys; 
      sort($random_keys);
      for($i=0; $i < $items_to_display && $i < count($random_keys); $i++){
        $new_result[$i] = clone($view->result[$random_keys[$i]]);
      }
      //usort($new_result,'events_sort_event_ads');
      $view->result = $new_result;
    } 
  }
}

function events_sort_event_ads($a, $b)
{
    if (!isset($a->node_data_field_date_field_date_value) || !isset($b->node_data_field_date_field_date_value) ||  $a->node_data_field_date_field_date_value == $b->node_data_field_date_field_date_value) {
        return 0;
    }
    return ($a->node_data_field_date_field_date_value < $b->node_data_field_date_field_date_value) ? -1 : 1;
}


function events_public_page() {
    $html = '';
    $events = array();
    
    $ids = events_get_events(EVENT_STATUS_NEW, true);
    if (!empty($ids)) {
        foreach ($ids as $event) {
            $node = node_load($event['event_id']);
            $node->event_data = $event;
            $node->friends_going = events_get_friends_going($event['event_id'], $event['user_id']);
            $events[] = node_view($node, true);
        }
    }
    
    $html .= theme('events_invited_list', $events, true);
    
    $events = array();
    $ids = events_get_popular_events(EVENT_STATUS_ACCEPTED, true);
    if (!empty($ids)) {
        foreach ($ids as $event) {
            $node = node_load($event['event_id']);
            $node->event_data = $event;
            $node->friends_going = $event['friends'];
            if (!empty($event['whoisgoing'])) {
              $node->whoisgoing = 'user';
            } else {
              $node->whoisgoing = 'friend';
            }
            $events[] = node_view($node, true);
        }
    }
    
    $html .= theme('events_accepted_list', $events, true);
    
    $html .= theme('klicango_invite_friends', "$('#active_event').val()");
    
    $html .= theme('events_find_events');
    
    return $html;
}

function events_private_page() {
    $html = '';
    $events = array();
    
    $ids = events_get_events(EVENT_STATUS_NEW, false);
    if (!empty($ids)) {
        foreach ($ids as $event) {
            $node = node_load($event['event_id']);
            $node->event_data = $event;
            $node->friends_going = events_get_friends_going($event['event_id'], $event['user_id']);
            $events[] = node_view($node, true);
        }
    }
    
    $html .= theme('events_invited_list', $events, false);
    
    $events = array();
    $ids = events_get_events(EVENT_STATUS_ACCEPTED, false);
    if (!empty($ids)) {
        foreach ($ids as $event) {
            $node = node_load($event['event_id']);
            $node->event_data = $event;
            $node->friends_going = events_get_friends_going($event['event_id'], $event['user_id']);
            $events[] = node_view($node, true);
        }
    }
    
    $html .= theme('events_accepted_list', $events, false);
    
    $html .= theme('klicango_invite_friends', "$('#active_event').val()");
    
    return $html;
}

function events_get_friends_going($event_id, $user_id) {
    $result = db_query('SELECT COUNT(*) FROM events_users 
                        WHERE event_id = %d AND status = %d AND user_id IN (
                            SELECT uid AS id FROM friends WHERE fid = %d AND uid IN (SELECT uid FROM users_roles WHERE rid = 6)
                            UNION 
                            SELECT fid AS id FROM friends WHERE uid = %d AND fid IN (SELECT uid FROM users_roles WHERE rid = 6)
                        )', $event_id, EVENT_STATUS_ACCEPTED, $user_id, $user_id);
    $count = db_result($result);
    
    return $count;
}

function events_get_user_activity_stream(){
  global $user;
  $view = views_get_view('nodecomments');
  $view->set_display('block_1');
  $view->set_use_pager(true);
  $view->set_use_ajax(false);
  $view->set_items_per_page(8);
  
  if(arg(0) == 'user' && arg(1) > 0){
    $user_id = arg(1);  
  }
  else{
    $user_id = $user->uid; 
  }

  $events = array_merge(events_get_events_created_by_user($user_id), events_get_user_events_with_status($user_id));
  if($user_id != $user->uid){
    $available_events = get_private_calendar_events_viewed_by_user($user_id, $user->uid, EVENT_STATUS_ACCEPTED);
    $events = array_intersect($events, $available_events);
  }
  
  $args = array();
  if(!empty($events))
    $args = array(implode('+',$events));
  $view->set_arguments($args);
  
 /* $view->pre_execute($args);
  // Preview the view.
  $output = $view->display_handler->preview();

  $view->post_execute();
  return $output;
   */
  
  return $view->render('block_1');
}


function events_get_latest_events_photos(){
  global $user;
  $events_to_show = 4;
  $photos_to_show = 4;
  
  if(arg(0) == 'user' && arg(1) > 0){   
    $user_id = arg(1);  
    $_user = user_load($user_id);
  }
  else{
    $user_id = $user->uid; 
    $_user = $user;
  }
  
  if($user_id != $user->uid){
    $accepted_events = get_private_calendar_events_viewed_by_user($user_id, $user->uid, EVENT_STATUS_ACCEPTED);  
  }
    
  $photos_res = db_query('select u.*, ph.field_comment_photo_fid, nc.nid, n.uid as event_owner, n.*, f.*,n.title as node_title, evt.field_date_value as event_date,evt_image_file.filepath as event_image, evt.field_event_type_value as event_type
                          FROM `content_field_comment_photo` ph 
                          INNER JOIN node_comments nc on nc.cid = ph.nid
                          INNER JOIN node n on n.nid = nc.nid 
                          INNER JOIN node comment_nid on nc.cid = comment_nid.nid 
                          INNER JOIN files f on f.fid = ph.field_comment_photo_fid 
                          INNER JOIN content_type_event evt on evt.nid = nc.nid 
                          INNER JOIN users u on u.uid = n.uid 
                          LEFT JOIN content_field_content_images evt_image on evt_image.nid = n.nid 
                          LEFT JOIN files evt_image_file on evt_image_file.fid = evt_image.field_content_images_fid 
                          WHERE nc.nid in (SELECT DISTINCT(nid) from ((SELECT nid from node where uid = %d AND type = \'event\' and status = 1) UNION (SELECT event_id as nid from events_users where sender_id = %d OR user_id = %d)) t ) 
                          AND field_comment_photo_fid IS NOT NULL'
                          .(($user_id != $user->uid) && !empty($accepted_events) ? ' AND nc.nid IN ('.implode(',',$accepted_events).') ' : '').
                          '
                          GROUP BY nc.nid, ph.field_comment_photo_fid
                          ORDER BY evt.field_date_value DESC, comment_nid.created DESC, fid DESC
                          ', $user_id, $user_id, $user_id);
                          
  //$events = events_get_events_created_by_user($user_id);
  //if(count($events) > 0){
   // $photos_res = db_query('select * from `content_field_comment_photo` WHERE nid in (57) and field_comment_photo_fid IS NOT NULL',implode(', ',$events));
    while ($r = db_fetch_array($photos_res)) {  
      $photos[$r['nid']]['photos'][$r['field_comment_photo_fid']] = $r;
      $photos[$r['nid']]['node_title'] = $r['node_title'];
      $photos[$r['nid']]['user'] = $r['event_owner'];
      $photos[$r['nid']]['uid'] = $r['event_owner'];
      $photos[$r['nid']]['event_date'] = $r['event_date'];
      $photos[$r['nid']]['event_type'] = $r['event_type'];
      $photos[$r['nid']]['event_image'] = $r['picture'];  
    }
    $photos = array_slice($photos,0,$events_to_show, true);
    $uids = array();
    foreach($photos as $_data){
      $uids[] = $_data['user']; 
    }

    $profiles = array();
    $result = db_query('SELECT f.name, f.type, v.value,uid FROM {profile_fields} f INNER JOIN {profile_values} v ON f.fid = v.fid WHERE uid in (%s)', implode(',',$uids));
    while ($field = db_fetch_object($result)) {
      $profiles[$field->uid][$field->name] = _profile_field_serialize($field->type) ? unserialize($field->value) : $field->value;
    }
    foreach($photos as &$_data){
      $_data['user'] = $profiles[$_data['user']]['first_name'].(!empty($profiles[$_data['user']]['surname']) ? ' '.$profiles[$_data['user']]['surname'] : ''); 
    }
    return theme('latest_events_photos', $photos, $photos_to_show);
}

function show_events($user_id,$date){
  global $user;
 /* if(arg(0) == 'user' && arg(1) > 0){
    $user_id = arg(1);  
  }
  else{
    $user_id = $user->uid; 
  } */

  $event_nids = get_user_events_for_date($user_id, $date);
  if($user_id != $user->uid){
    $available_events = get_private_calendar_events_viewed_by_user($user_id, $user->uid, EVENT_STATUS_ACCEPTED);
    $event_nids = array_intersect($available_events, $event_nids);  
  }

  $events = array();
  foreach($event_nids as $_nid){
    $events[] = theme('event_for_day',node_load($_nid),$user_id);  
  }
   
  $return = array('html'=>theme('date_events_list', $events, true), 'title'=>date('d F Y',mktime(0,0,0,substr($date,5,2),substr($date,8,2),substr($date,0,4))));  
  echo json_encode($return);
  exit;
}

function get_user_events_for_date($user_id = null, $date = null, $load_full_node = false){
  $events = array();
  if(!empty($date)){
    //First get events that are created by user for this date
    if(empty($user_id)){
      global $user;
      $user_id = $user->uid;
    }  

    $res = db_query("SELECT e.nid from {content_type_event} e
                      INNER JOIN {node} n on n.nid = e.nid
                      where uid = %d AND n.status = 1 AND DATE_FORMAT(field_date_value,'%%Y-%%m-%%d') = '%s'",$user_id, $date);
    while ($r = db_fetch_array($res)) {
      if($load_full_node)
        $events[$r['nid']] = node_load($r['nid']);
      else
        $events[$r['nid']] = $r['nid'];
    } 
     
    // Also, select events that are user subscribed to
    $res = db_query("SELECT event_id from {events_users} eu
                      INNER JOIN {content_type_event} e on eu.event_id = e.nid
                      where user_id = %d AND eu.status = %d AND DATE_FORMAT(field_date_value,'%%Y-%%m-%%d') = '%s'",$user_id, EVENT_STATUS_ACCEPTED,$date);
    while ($r = db_fetch_array($res)) {
      if($load_full_node)
        $events[$r['event_id']] = node_load($r['event_id']);
      else
        $events[$r['event_id']] = $r['event_id'];
    }
    
  }    
  return $events;
}

function event_decline_event_invitation() {
    global $user;
    $event_id = $_GET['event_id'];
    db_query('UPDATE events_users SET status = %d WHERE event_id = %d AND user_id = %d', EVENT_STATUS_DECLINED, $event_id, $user->uid);
    drupal_json(array('status' => 'success'));
    exit;
}

function event_accept_event_invitation() {
    global $user;
    $event_id = $_GET['event_id'];
    $status = $_GET['status'];
    if ($status == 'new') {
        $event_status = EVENT_STATUS_NEW;
    } else {
        $event_status = EVENT_STATUS_ACCEPTED;
    }
    $count = db_query('SELECT user_id FROM events_users WHERE event_id = %d AND user_id = %d', $event_id, $user->uid);
    if (db_result($count)) {
      $result = db_query('UPDATE events_users SET status = %d WHERE event_id = %d AND user_id = %d', $event_status, $event_id, $user->uid);
    } else {
      $data = array('event_id' => $event_id, 'sender_id' => $user->uid, 'user_id' => $user->uid, 'status' => $event_status);      
      drupal_write_record('events_users', $data); 
    }
    drupal_json(array('status' => 'success'));
    exit;
}

function events_get_event_attenders($nid){
  $f = db_query('SELECT f.name FROM {profile_fields} f');
  while ($field = db_fetch_array($f)) {
    $profile_fields[$field['name']] = $field['fid'];
  }
  $res = db_query("SELECT eu.*, u.picture, u.name, fbu.name as fb_name 
                    from events_users eu
                   LEFT JOIN users u on u.uid = eu.user_id
                   LEFT JOIN friends_facebook_invited fbu on fbu.facebook_id = eu.facebook_id
                   WHERE event_id = %d",$nid);
                   
  $people = $persons = $profiles = array();

  while ($row = db_fetch_array($res)) {
    if(empty($row['picture']) && variable_get('user_picture_default','') != ''){
      $row['picture'] = variable_get('user_picture_default','');
    }
    $persons[] = $row;  
    if(!empty($row['user_id'])){
      $profiles[$row['user_id']] = array();    
    }
  }
  
  $result = db_query('SELECT f.name, f.type, v.value,uid FROM {profile_fields} f INNER JOIN {profile_values} v ON f.fid = v.fid WHERE uid in (%s)', implode(',',array_keys($profiles)));
  while ($field = db_fetch_object($result)) {
    $profiles[$field->uid][$field->name] = _profile_field_serialize($field->type) ? unserialize($field->value) : $field->value;
  }
  
  foreach($persons as $person) {    
    if(!empty($person['user_id'])){ 
      if(isset($profiles[$person['user_id']]))
        $person = array_merge($person, $profiles[$person['user_id']]);   
     $person['photo'] = theme_imagecache('user_picture_meta', $person['picture']);
     if(!empty($person['facebook_id']))
      $person['full_name'] = $person['fb_name'];  
     else
      $person['full_name'] = ((isset($person['first_name'])) ? $person['first_name'].(isset($person['surname']) ? ' '.$person['surname'] : '') : $person['name']);
     
    } elseif(!empty($person['facebook_id'])){ 
      $person['full_name'] = $person['fb_name'];  
      $person['photo'] = '<img src="https://graph.facebook.com/'.$person['facebook_id'].'/picture" />';
    }   
    
    if($person['status'] == EVENT_STATUS_ACCEPTED){
      $people['going'][$person['user_id']] = $person;  
    } elseif($person['status'] != EVENT_STATUS_ACCEPTED){
      $people['invited'][] = $person;  
      
    }
  }    
  return $people;
}

function events_get_event_form_data($node){
  //$node = node_load($event_id);
  $data = array();
  $data['nid'] = $node->nid;
  $data['title'] = $node->title;
  $data['details'] = $node->field_event_details[0]['value'];
  $data['location'] = $node->field_location[0]['value'];
  
  $date = strtotime($node->field_date[0]['value']);
  
  $data['date'] = date('d/m/Y',$date);
  $data['time'] = date('H:i',$date);
  $data['gratuity'] = $node->field_event_gratuity[0]['value'];
  $data['email'] = $node->field_event_email[0]['value'];
  $data['phone'] = $node->field_event_contact_phone[0]['value'];
  
  return json_encode(array('data'=>$data));
  //exit;
}  

function events_users() {
    $event = explode('_', $_GET['event_id']);
    $event = $event[1];
    $html = '';
    $local_users = array();
    $facebook_users = array();
    
    if ($event) {
        if (!empty($_GET['type']) && $_GET['type'] == 'going') {
            $result = db_query('SELECT user_id FROM events_users WHERE user_id IS NOT NULL AND event_id = %d AND status = %d AND user_id IN (SELECT uid FROM users_roles WHERE rid = 6)', $event, EVENT_STATUS_ACCEPTED);
            $fb_result = db_query('SELECT events_users.facebook_id, friends_facebook_invited.name FROM events_users LEFT JOIN friends_facebook_invited ON events_users.facebook_id = friends_facebook_invited.facebook_id WHERE user_id IS NULL AND event_id = %d AND status = %d', $event, EVENT_STATUS_ACCEPTED);
        } else {
            $result = db_query('SELECT user_id FROM events_users WHERE user_id IS NOT NULL AND event_id = %d AND status IN (%d, %d) AND user_id IN (SELECT uid FROM users_roles WHERE rid = 6)', $event, EVENT_STATUS_NEW, EVENT_STATUS_DECLINED);
            $fb_result = db_query('SELECT events_users.facebook_id, friends_facebook_invited.name FROM events_users LEFT JOIN friends_facebook_invited ON events_users.facebook_id = friends_facebook_invited.facebook_id WHERE user_id IS NULL AND event_id = %d AND status IN (%d, %d)', $event, EVENT_STATUS_NEW, EVENT_STATUS_DECLINED);
        }
        
        while ($uid = db_fetch_array($result)) {
            $_user = user_load($uid['user_id']);
            $_user->friends_count = sizeof(klicango_friends_all_friends($uid['user_id']));
            $local_users[] = $_user; 
        }
        
        while ($user_data = db_fetch_array($fb_result)) {
            $facebook_users[] = $user_data;
        }
        
        $html = theme('events_local_users', $local_users);
        $html .= theme('events_facebook_users', $facebook_users);
    }
    
    echo '<div id="dialog-' . htmlspecialchars($_GET['type']) . '" class="events-users ' . htmlspecialchars($_GET['type']) . '-form" title="' . htmlspecialchars($_GET['type']) . '"><div class="scroll-pane">' . $html . '</div></div>';
    exit;
}

function events_get_popular_events($status, $is_public = true) {
    global $user;
    if ($is_public) {
        $type = 'public';
    } else {
        $type = 'private';
    }
    
    $ids = array();
    
    if (user_is_logged_in()) {             
        $ids = events_top_by_friends(5);   
    }
    
    if (sizeof($ids) < 5) {
      $ids += events_top_by_users((5-sizeof($ids)), $ids);
      if (sizeof($ids) < 5) {
        $ids += events_closest((5-sizeof($ids)), $ids);
      } 
    }
        
    return $ids;
}

function events_top_by_friends($number, $exclude = array()) {
  global $user;
  
  if (!empty($exclude)) {
    $exclude = array_keys($exclude);
    $exclude_str = implode(', ', $exclude);
  }
  
  $result = db_query('SELECT ev.nid AS event_id, COUNT(eu.user_id) AS friends FROM content_type_event AS ev
                      LEFT JOIN events_users AS eu ON ev.nid = eu.event_id
                      WHERE (eu.user_id IN (
                          SELECT uid AS id FROM friends WHERE fid = %d AND uid IN (SELECT uid FROM users_roles WHERE rid = 6)
                          UNION 
                          SELECT fid AS id FROM friends WHERE uid = %d AND fid IN (SELECT uid FROM users_roles WHERE rid = 6)
                      ) 
                      AND ev.field_event_type_value = "public" AND eu.status = 3 AND (ev.field_date_value > NOW() OR ev.field_date_value2 > NOW())
                      ' . (!empty($exclude_str) ? ' AND ev.nid NOT IN (' . $exclude_str . ') ' : '') . '
                      GROUP BY ev.nid 
                      ORDER BY friends DESC, ev.field_date_value ASC
                      LIMIT 0, %d', $user->uid, $user->uid, $user->uid, $number);
  
  //                    AND ev.nid NOT IN (SELECT event_id FROM events_users WHERE user_id = %d))
  
  $ids = array();
  while($event = db_fetch_array($result)) {
      $ids[$event['event_id']] = $event;    
  }
  
  return $ids;
}

function events_top_by_users($number, $exclude = array()) {
  global $user;
  
  if (!empty($exclude)) {
    $exclude = array_keys($exclude);
    $exclude_str = implode(', ', $exclude);
  }
  
  $result = db_query('SELECT ev.nid AS event_id, COUNT(eu.user_id) AS friends FROM content_type_event AS ev
                      LEFT JOIN events_users AS eu ON ev.nid = eu.event_id
                      WHERE (ev.field_event_type_value = "public" AND eu.status = 3 AND (ev.field_date_value > NOW() OR ev.field_date_value2 > NOW()))                      
                      ' . (!empty($exclude_str) ? ' AND ev.nid NOT IN (' . $exclude_str . ') ' : '') . ' 
                      AND eu.user_id IN (SELECT uid FROM users_roles WHERE rid = 6)
                      GROUP BY ev.nid 
                      ORDER BY friends DESC, ev.field_date_value ASC
                      LIMIT 0, %d', $number);
  //' . (user_is_logged_in() ? ' AND ev.nid NOT IN (SELECT event_id FROM events_users WHERE user_id = ' . $user->uid . ')) ' : '') . '
  
  $ids = array();
  while($event = db_fetch_array($result)) {
      $event['whoisgoing'] = 'user';
      $ids[$event['event_id']] = $event;    
  }

  return $ids;
}

function events_closest($number, $exclude = array(), $offset = 0, $search = '') {
  global $user;
  
  if (!empty($exclude)) {
    $exclude = array_keys($exclude);
    $exclude_str = implode(', ', $exclude);
  }
  
  if ($search) {
    $result = db_query('SELECT ev.nid AS event_id, 0 AS friends FROM content_type_event AS ev 
                      LEFT JOIN node ON ev.nid = node.nid
                      WHERE (ev.field_event_type_value = "public" AND (ev.field_date_value > NOW() OR ev.field_date_value2 > NOW()))
                      ' . (!empty($exclude_str) ? ' AND ev.nid NOT IN (' . $exclude_str . ') ' : '') . '
                      AND node.title LIKE "%%%s%%"
                      ORDER BY ev.field_date_value ASC', $search);
    
  } else {
    $result = db_query('SELECT ev.nid AS event_id, 0 AS friends FROM content_type_event AS ev
                      WHERE (ev.field_event_type_value = "public" AND (ev.field_date_value > NOW() OR ev.field_date_value2 > NOW()))
                      ' . (!empty($exclude_str) ? ' AND ev.nid NOT IN (' . $exclude_str . ') ' : '') . '
                      ORDER BY ev.field_date_value ASC
                      LIMIT %d, %d', $offset, $number);
    
  }
  // ' . (user_is_logged_in() ? ' AND ev.nid NOT IN (SELECT event_id FROM events_users WHERE user_id = ' . $user->uid . ')) ' : '') . '
  
  $ids = array();
  while($event = db_fetch_array($result)) {
      $event['whoisgoing'] = 'user';
      $ids[$event['event_id']] = $event;    
  }
  
  return $ids;
}

function events_user_calendar($date, $user_id = null){
  if(empty($user_id)){
    global $user;
  }
  else{
    $user = user_load($user_id);
  }
  
  $date_parts = explode('-', $date);
  
  $return = array();
  $view = views_get_view('content_event_calendar',true);
  $view->set_display('calendar_period_2');
  $args = array($date, $user->name);
  $view->set_arguments($args);
  $view->pre_execute();
  $return['calendar'] = $view->render('calendar_period_2');
  $return['next_url'] = url('user/'.$user->uid, array('query'=> array('cal'=> date('Y-m',strtotime('+1 month',mktime(0,0,0,$date_parts[1],1,$date_parts[0]))), 'uid'=>$user->uid ))); 
  $return['prev_url'] = url('user/'.$user->uid, array('query'=> array('cal'=> date('Y-m',strtotime('-1 month',mktime(0,0,0,$date_parts[1],1,$date_parts[0]))), 'uid'=>$user->uid ))); 
  $return['month_name'] = date('F Y', mktime(0,0,0,$date_parts[1],1,$date_parts[0])); 
  
  header('Content-type: application/json');
  echo json_encode($return);
  exit;
}

function events_find() {
  global $user;
  $offset = (!empty($_GET['offset']) ? $_GET['offset'] : 0);
  $limit = (!empty($_GET['limit']) ? $_GET['limit'] : 10);
  $search = (!empty($_GET['search']) ? $_GET['search'] : '');  
  
  $events_list = events_closest($limit, array(), $offset, $search);
  
  $events = array();
  foreach ($events_list as $event_id => $data) {
    $events[] = theme('event_for_day',node_load($event_id),$user_id);  
  }
  
  if ($events) {
    $html = implode('', $events);
    
    $more_events = events_closest(1, array(), $offset+$limit, $search);
    if (!empty($more_events)) {
      $html .= '<tr><td colspan="3" style="text-align: center;"><a onclick="loadFindEvents(' . ($offset+$limit) . ', ' . $limit . ')" href="javascript: void(0);" class="show_more">' . t('Show more events') . '</a></td></tr>';
    }
    
  } else {
    $html = '<tr><td style="width: 100%; text-align: center;">' . t('Events not found') . '</td></tr>';
  }
  
  echo $html;
  exit;  
}

function get_private_calendar_events_viewed_by_user($viewed_user_id ,$user_id, $status = ''){
  $events_ids = array();
  $result = db_query("SELECT eu.event_id 
                      FROM events_users eu 
                      INNER JOIN content_type_event e on e.nid = eu.event_id
                      WHERE user_id  = %d 
                      AND (field_event_type_value  = 'public' 
                        OR ((field_event_type_value  = 'private') AND (eu.event_id IN (SELECT event_id FROM events_users WHERE user_id = %d))))
                      ".(!empty($status) ? "AND eu.status = %d" : "")." 
  ", $viewed_user_id, $user_id,(!empty($status) ? $status : ""));
  while ($_event = db_fetch_object($result)) {
    $events_ids[] = $_event->event_id;
  }

  return $events_ids;
  
}

function events_print_coupon($event_id){
  drupal_add_js('jQuery(document).ready(function(){ window.print(); });','inline');
  return node_view(node_load($event_id));    
}