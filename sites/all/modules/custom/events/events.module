<?php

define('EVENT_STATUS_UNDEFINED', '');
define('EVENT_STATUS_NEW', 1);
define('EVENT_STATUS_PENDING', 2);
define('EVENT_STATUS_ACCEPTED', 3);
define('EVENT_STATUS_DECLINED', 4);

function events_menu(){
  $items = array(
    'create_event_if_valid' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'create_event_if_valid',
      'access callback' => 'user_is_logged_in'
    ),
    
    'check_event_fields' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'check_event_fields',
      'access callback' => 'user_is_logged_in'
    ),
    
    'check_event_form_values' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'check_event_form_values',
      'access callback' => 'user_is_logged_in'
    ),
    
    'event_post_comment' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'event_post_comment',
      'access callback' => 'user_is_logged_in'
    ),
    
    'add_event_for_user' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'add_event_for_user',
      'access callback' => 'user_is_logged_in'
    ),
    
    'remove_event_for_user' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'remove_event_for_user',
      'access callback' => 'user_is_logged_in'
    ),
    
  );
  return $items;
  
}

function events_block($op = 'list', $delta = 0, $edit = array()) {
    if ($op == 'list') {
        $blocks[0] = array(
            'title' => t('Event Photos Right'),
            'info' => t('Event Photos Right'),
            'weight' => 0,
        );
        return $blocks;
    } else if ($op == 'view') {
        switch ($delta) {
          case 0:
            // Your module will need to define this function to render the block.
            $block = array(
              'content' => events_get_events_photos(),
            );
            break; 
        }
        return $block;
    }
}



function events_theme() {
    return array(
      'create_event_form' => array(
        'template' => 'create-event',
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      'event_photos_list' => array(
        'template' => 'event-photos-list',
        'arguments' => array('content' => NULL, 'photos_count' => NULL),
        'path' => drupal_get_path('theme',variable_get('theme_default',''))
      ),
      
      'event_post_box' => array(
        'template' =>'event-post-box',
        'path' => drupal_get_path('theme',variable_get('theme_default','')),
      
      )
      
      
    );
}

function events_form_alter(&$form, &$form_state, $form_id) {
   
}


function events_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'view':
      if($node->type == 'event'){
        $view = views_get_view('nodecomments');
        $view->set_display('nodecomment_comments_1');
        $args = array($node->nid);
        $view->set_arguments($args);
        $node->comments_form = theme('event_post_box');
        $node->comments_view = $view->render('nodecomment_comments_1');
      }
      
      break;  
  }
}

function check_event_fields($values, &$errors){
  $is_valid = true;
  if(!isset($values['title']) || empty($values['title'])){
    $errors['title'] = t('Enter event title'); 
    $is_valid = false;
  }
  
  if(!isset($values['details']) || empty($values['details'])){
    $errors['details'] = t('Enter event details'); 
    $is_valid = false;
  }
  
  if(!isset($values['location']) || empty($values['location'])){
    $errors['location'] = t('Enter event location'); 
    $is_valid = false;
  }
  
  if(!isset($values['date']) || empty($values['date'])){
    $errors['date'] = t('Enter event date'); 
    $is_valid = false;
  }
  
  if(isset($values['date']) && !empty($values['date']) && strtotime($values['date']) == -1){
    $errors['date'] = t('Enter valid date'); 
    $is_valid = false;
  }
  if(isset($values['date']) && !empty($values['date'])){
    if(!preg_match('/^([1-9]|0[1-9]|[12][0-9]|3[01])\/([1-9]|0[1-9]|1[012])\/(2)\d\d\d$/',$values['date'])){
      $errors['date'] = t('Date format: d/m/Y'); 
      $is_valid = false;
    }
  }
  
  if(!isset($values['time']) || empty($values['time'])){
    $errors['time'] = t('Enter event time'); 
    $is_valid = false;
  }
  
  if(isset($values['time']) && !empty($values['time'])){
    if(!preg_match('/^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))(\s*-\s*(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9])))?$/',$values['time'])){
      $errors['time'] = t('Enter valid time'); 
      $is_valid = false;
    }
  }
  
  
  if(isset($values['email']) && !empty($values['email']) && !valid_email_address($values['email'])){
    $errors['email'] = t('Enter valid e-mail address'); 
    $is_valid = false;
  }
  
  return $is_valid;
}

function check_event_form_values(){
  if(isset($_POST)){
    $errors = $return = array();
    $is_valid = check_event_fields($_POST, $errors);  
    if(!$is_valid){
      $return = array('isValid' => false, 'errors'=>$errors);
    }
    else 
    $return = array('isValid' => true);  
  }
  else $return = array('success' => false);
  
  echo json_encode($return);
  exit;
}

function create_event_if_valid(){
  
  if(isset($_POST)){
    $errors = $return = array();
    $is_valid = check_event_fields($_POST, $errors);
    if(!$is_valid){
      
    } else{
      
      global $user;   
      $event = new stdClass();
      $event->type = 'event';
      $event->uid = $user->uid;
      $event->status = 1;
      $event->title = trim($_POST['title']);
      $event->field_event_details[0]['value']= trim($_POST['details']);
      $event->field_location[0]['value']= trim($_POST['location']);
      $date_arr = explode('/',trim($_POST['date']));
      $time = $_POST['time']; 
      if(strpos($time,'-') !== false)
        $time = trim(substr($_POST['time'],0,strpos($_POST['time'],'-')));
      $time = explode(':',$time);  
      $event->field_date[0]['value']= $event->field_date[0]['value2']= date('c', mktime($time[0],$time[1],0,$date_arr[1],$date_arr[0],$date_arr[2]));
      $event->field_event_email[0]['value']= $_POST['email'];
      $event->field_event_contact_phone[0]['value']= $_POST['phone'];
      if(in_array('professional', $user->roles)){
         $event->field_event_gratuity[0]['value']= $_POST['gratuity'];  
        
      }
      $event->field_event_type[0]['value']= (in_array('individual', $user->roles) ? 'private' : 'public');
      if ($file = file_save_upload('photo')) {
        $event->field_content_images[0] = (array)$file;  
      }
      
      node_save($event);
      $query = '';
      if (!empty($_POST['invite'])) {
        $invite_str = implode(',', $_POST['invite']);
        $query = 'invite=' . $invite_str . '&event_id=' . $event->nid;
      }
      
      if($event->nid > 0)
        drupal_goto('node/'.$event->nid, $query);
      else drupal_goto('<front>');  
      //die();
    }
  }
  return '';
}

function events_get_events_photos(){
  
  $res = db_query("SELECT field_comment_photo_fid, f.*
                      FROM content_field_comment_photo ph
                      INNER JOIN node comment_nid on comment_nid.nid = ph.nid
                      INNER JOIN node_comments nc on nc.cid = comment_nid.nid
                      INNER JOIN files f on f.fid = field_comment_photo_fid
                      WHERE nc.nid = %d AND field_comment_photo_fid IS NOT NULL
                      ORDER BY comment_nid.created DESC
                      LIMIT 7
                      ",arg(1));
  while ($r = db_fetch_array($res)) {
    $photos[] = $r;
  }
  
  $count_res = db_query("SELECT count(field_comment_photo_fid) as photos_count
                      FROM content_field_comment_photo ph
                      INNER JOIN node comment_nid on comment_nid.nid = ph.nid
                      INNER JOIN node_comments nc on nc.cid = comment_nid.nid
                      WHERE nc.nid = %d AND field_comment_photo_fid IS NOT NULL
                      ",arg(1));                      
  
  $count = db_fetch_array($count_res);
  $count = $count['photos_count'];
                     
  $photos_html = '';
  foreach($photos as $_photo){
    $photos_html .= '<div class="item"><a href="'.imagecache_create_url('comment_image_big',$_photo['filepath']).'">'.theme_imagecache('comment_image_right_thumbnail',$_photo['filepath']).'</a></div>';
  }
  //$view = views_get_view('event_photos');
  //$view->set_display('block_1');
  //$view->set_arguments(array(arg(1)));
  return theme('event_photos_list',$photos_html, $count);//$view->render('block_1');
}

function event_post_comment(){
  if(isset($_POST) && isset($_POST['comment_target_nid']) && ($_POST['comment_target_nid'] > 0) && (isset($_POST['comment_body']) || isset($_FILES['files']['photo']))){
    
    global $user;   
    $comment = new stdClass();
    $comment->type = 'comment';
    $comment->title = 'Comment "'.substr($_POST['comment_body'],0, 20).'..." from '.$user->name.' for node '.$_POST['comment_target_nid'];
    $comment->uid = $user->uid;
    $comment->name = $user->name;
    $comment->status = 1;
    $comment->body = trim($_POST['comment_body']);

    if(!empty($_FILES['files'])){
      $_index = 0;
      foreach($_FILES['files']['name'] as $_name => $_ph){
        if ($file = file_save_upload($_name)) {
          $comment->field_comment_photo[$_index++] = (array)$file;      
        }
      }
    }
    
    /*echo '<pre>';
    print_r($_FILES);
    print_r($comment);
    die();*/
    
    node_save($comment);
    if($comment->nid > 0){
      $comment->comment_target_nid = (int)$_POST['comment_target_nid']; 
       nodecomment_save($comment);
    }
    drupal_goto('node/'.$_POST['comment_target_nid']);
  }
  
}


function events_get_user_events_with_status($user_id = null, $status = EVENT_STATUS_ACCEPTED){
  $events = array();
  if(empty($user)){
    global $user;
    $user_id = $user->uid;
  }
  $res = db_query('SELECT * from {events_users} where user_id = %d AND status = %d',$user->uid, $status);
  while ($r = db_fetch_array($res)) {
    $events[] = $r['event_id'];
  }
  return $events;
}

function events_get_event_status_for_user($event_id = null, $user_id = null){
  $status = '';
  if(!empty($event_id) && !empty($user_id)){
    $res = db_query('SELECT status from {events_users} where user_id = %d AND event_id = %d',$user_id, $event_id); 
    $status = db_fetch_array($res);
    $status = $status['status'];
  }
  return $status;
}

function events_event_is_available_to_add($node){
  global $user;
  if(!isset($node->uid)){
    if(isset($node->users_uid)){
      $node->uid = $node->users_uid;
    }
    else{
      $_node = node_load($node->nid);
      $node->uid = $_node->uid;
    }
  }
    
  return (user_is_logged_in() && in_array('individual', $user->roles) && ($user->uid != $node->uid) && events_get_event_status_for_user($node->nid, $user->uid) != EVENT_STATUS_ACCEPTED);
}

function add_event_for_user(){
  $res = false;
  if(isset($_POST) && isset($_POST['event_id'])){
    global $user;
    $event_id = (int)$_POST['event_id'];
    $event_node = node_load($event_id);
    if(events_event_is_available_to_add($event_node)){
      $data = array('event_id' => $event_id, 'sender_id' => $user->uid, 'user_id' => $user->uid, 'status' => EVENT_STATUS_ACCEPTED);
      if(events_get_event_status_for_user($event_id, $user->uid) != EVENT_STATUS_UNDEFINED)
        $res = drupal_write_record('events_users', $data, array('event_id', 'user_id'));  
      else
        $res = drupal_write_record('events_users', $data);    
    }
  }
  $output = array('success' => $res);
 
    
  echo json_encode($output);
  exit;
}

function remove_event_for_user(){
  $res = false;
  if(isset($_POST) && isset($_POST['event_id'])){
    global $user;
    $event_id = (int)$_POST['event_id'];
    //$event_node = node_load($event_id);
    $data = array('event_id' => $event_id, 'sender_id' => $user->uid, 'user_id' => $user->uid, 'status' => EVENT_STATUS_DECLINED);
    $res = drupal_write_record('events_users', $data, array('event_id', 'user_id'));  
  }
  $output = array('success' => $res, 'ee' => $data);
    
  echo json_encode($output);
  exit;
}

function events_preprocess_page(&$variables) {
    $variables['menu_stats']['public_pending'] = events_get_count(EVENT_STATUS_NEW, true);
    $variables['menu_stats']['private_pending'] = events_get_count(EVENT_STATUS_NEW, false);
}

function events_get_count($status, $is_public = true) {
    if ($is_public) {
        $type = 'public';
    } else {
        $type = 'private';
    }
    $result = db_query('SELECT COUNT(*) AS num FROM events_users AS eu LEFT JOIN content_type_event ON eu.event_id = ev.nid WHERE ev.field_event_type_value = "%s" AND eu.status = %d', $type, $status);
    $count = db_result($result);
    
    return $count;
}
